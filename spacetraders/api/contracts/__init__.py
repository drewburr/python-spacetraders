""" Contains methods for accessing the API """

# Endpoint(path='/my/contracts', method='get', description='Return a paginated list of all your contracts.', name='get-contracts', requires_security=True, tag='contracts', summary='List Contracts', relative_imports={'from typing import Optional', 'from typing import Union', 'from ...types import UNSET, Unset', 'from typing import cast', 'from typing import Dict', 'from ...models.get_contracts_response_200 import GetContractsResponse200'}, query_parameters={'page': IntProperty(name='page', required=False, nullable=True, default=1, python_name='page', description=None, example=None), 'limit': IntProperty(name='limit', required=False, nullable=True, default=10, python_name='limit', description=None, example=None)}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetContractsResponse200', module_name='get_contracts_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data', 'meta'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/Contract'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'meta': Reference(ref='#/components/schemas/Meta')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetContractsResponse200'}, required_properties=[ListProperty(name='data', required=True, nullable=False, default=None, python_name='data', description=None, example=None, inner_property=ModelProperty(name='data_item', required=True, nullable=False, default=None, python_name='data_item', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.contract_type import ContractType', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='meta', required=True, nullable=False, default=None, python_name='meta', example=None, class_info=Class(name='Meta', module_name='meta'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['total', 'page', 'limit'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'total': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Shows the total amount of items of this kind that exist.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'page': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', schema_format=None, default=1, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'limit': Schema(title=None, multipleOf=None, maximum=20.0, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of items in each page. Limits how many items can be fetched at once.', schema_format=None, default=10, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Meta details for pagination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None, x-examples={'example-1': {'total': 6, 'page': 1, 'limit': 20}}), description='Meta details for pagination.', roots={'Meta', '/components/schemas/Meta'}, required_properties=[IntProperty(name='total', required=True, nullable=False, default=None, python_name='total', description='Shows the total amount of items of this kind that exist.', example=None), IntProperty(name='page', required=True, nullable=False, default=1, python_name='page', description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', example=None), IntProperty(name='limit', required=True, nullable=False, default=10, python_name='limit', description='The amount of items in each page. Limits how many items can be fetched at once.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.contract import Contract', 'from ..models.meta import Meta'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'page', 'limit'})
# Endpoint(path='/my/contracts/{contractId}/accept', method='post', description='Accept a contract by ID. \n\nYou can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.', name='accept-contract', requires_security=True, tag='contracts', summary='Accept Contract', relative_imports={'from ...models.accept_contract_response_200 import AcceptContractResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('contractId', StringProperty(name='contractId', required=True, nullable=False, default=None, python_name='contract_id', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='AcceptContractResponse200', module_name='accept_contract_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'contract': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'AcceptContractResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='AcceptContractResponse200Data', module_name='accept_contract_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'contract': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'AcceptContractResponse200', 'AcceptContractResponse200Data'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='contract', required=True, nullable=False, default=None, python_name='contract', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from ..models.contract_type import ContractType', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.contract import Contract'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.accept_contract_response_200_data import AcceptContractResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'contract_id'})
from .accept_contract import asyncio_detailed as accept_contract_asyncio
from .accept_contract import sync_detailed as accept_contract

# Endpoint(path='/my/contracts/{contractId}/deliver', method='post', description="Deliver cargo to a contract.\n\nIn order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.\n\nCargo that was delivered will be removed from the ship's cargo.", name='deliver-contract', requires_security=True, tag='contracts', summary='Deliver Cargo to Contract', relative_imports={'from ...models.deliver_contract_json_body import DeliverContractJsonBody', 'from typing import Dict', 'from ...models.deliver_contract_response_200 import DeliverContractResponse200', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('contractId', StringProperty(name='contractId', required=True, nullable=False, default=None, python_name='contract_id', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='DeliverContractResponse200', module_name='deliver_contract_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'contract': Reference(ref='#/components/schemas/Contract'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'DeliverContractResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='DeliverContractResponse200Data', module_name='deliver_contract_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'contract': Reference(ref='#/components/schemas/Contract'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'DeliverContractResponse200', 'DeliverContractResponse200Data'}, required_properties=[ModelProperty(name='contract', required=True, nullable=False, default=None, python_name='contract', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from ..models.contract_type import ContractType', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract import Contract', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.deliver_contract_response_200_data import DeliverContractResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='DeliverContractJsonBody', module_name='deliver_contract_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'DeliverContractJsonBody'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='Symbol of a ship located in the destination to deliver a contract and that has a good to deliver in its cargo.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the good to deliver.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amount of units to deliver.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'contract_id'})
from .deliver_contract import asyncio_detailed as deliver_contract_asyncio
from .deliver_contract import sync_detailed as deliver_contract

# Endpoint(path='/my/contracts/{contractId}/fulfill', method='post', description='Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.', name='fulfill-contract', requires_security=True, tag='contracts', summary='Fulfill Contract', relative_imports={'from ...models.fulfill_contract_response_200 import FulfillContractResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('contractId', StringProperty(name='contractId', required=True, nullable=False, default=None, python_name='contract_id', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='FulfillContractResponse200', module_name='fulfill_contract_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'contract': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'FulfillContractResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='FulfillContractResponse200Data', module_name='fulfill_contract_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'contract': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'FulfillContractResponse200Data', 'FulfillContractResponse200'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='contract', required=True, nullable=False, default=None, python_name='contract', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from ..models.contract_type import ContractType', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.contract import Contract'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.fulfill_contract_response_200_data import FulfillContractResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'contract_id'})
from .fulfill_contract import asyncio_detailed as fulfill_contract_asyncio
from .fulfill_contract import sync_detailed as fulfill_contract

# Endpoint(path='/my/contracts/{contractId}', method='get', description='Get the details of a contract by ID.', name='get-contract', requires_security=True, tag='contracts', summary='Get Contract', relative_imports={'from ...models.get_contract_response_200 import GetContractResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('contractId', StringProperty(name='contractId', required=True, nullable=False, default=None, python_name='contract_id', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetContractResponse200', module_name='get_contract_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetContractResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from ..models.contract_type import ContractType', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract import Contract'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'contract_id'})
from .get_contract import asyncio_detailed as get_contract_asyncio
from .get_contract import sync_detailed as get_contract
from .get_contracts import asyncio_detailed as get_contracts_asyncio
from .get_contracts import sync_detailed as get_contracts

__all__ = (
    "get_contracts",
    "get_contracts_asyncio",
    "get_contract",
    "get_contract_asyncio",
    "accept_contract",
    "accept_contract_asyncio",
    "deliver_contract",
    "deliver_contract_asyncio",
    "fulfill_contract",
    "fulfill_contract_asyncio",
)
