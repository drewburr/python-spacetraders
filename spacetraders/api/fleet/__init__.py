""" Contains methods for accessing the API """

# Endpoint(path='/my/ships', method='get', description="Return a paginated list of all of ships under your agent's ownership.", name='get-my-ships', requires_security=True, tag='fleet', summary='List Ships', relative_imports={'from typing import Optional', 'from typing import Union', 'from ...types import UNSET, Unset', 'from ...models.get_my_ships_response_200 import GetMyShipsResponse200', 'from typing import cast', 'from typing import Dict'}, query_parameters={'page': IntProperty(name='page', required=False, nullable=True, default=1, python_name='page', description=None, example=None), 'limit': IntProperty(name='limit', required=False, nullable=True, default=10, python_name='limit', description=None, example=None)}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetMyShipsResponse200', module_name='get_my_ships_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data', 'meta'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/Ship'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'meta': Reference(ref='#/components/schemas/Meta')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetMyShipsResponse200'}, required_properties=[ListProperty(name='data', required=True, nullable=False, default=None, python_name='data', description=None, example=None, inner_property=ModelProperty(name='data_item', required=True, nullable=False, default=None, python_name='data_item', example=None, class_info=Class(name='Ship', module_name='ship'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'registration', 'nav', 'crew', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'cargo', 'fuel', 'cooldown'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'registration': Reference(ref='#/components/schemas/ShipRegistration'), 'nav': Reference(ref='#/components/schemas/ShipNav'), 'crew': Reference(ref='#/components/schemas/ShipCrew'), 'frame': Reference(ref='#/components/schemas/ShipFrame'), 'reactor': Reference(ref='#/components/schemas/ShipReactor'), 'engine': Reference(ref='#/components/schemas/ShipEngine'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'modules': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipModule'), properties=None, additionalProperties=None, description='Modules installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='Mounts installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'fuel': Reference(ref='#/components/schemas/ShipFuel')}, additionalProperties=None, description='Ship details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship details.', roots={'/components/schemas/Ship', 'Ship'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', example=None, max_length=None, pattern=None), ModelProperty(name='registration', required=True, nullable=False, default=None, python_name='registration', example=None, class_info=Class(name='ShipRegistration', module_name='ship_registration'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'factionSymbol', 'role'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The agent's registered name of the ship", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction the ship is registered with', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'role': Reference(ref='#/components/schemas/ShipRole')}, additionalProperties=None, description='The public registration information of the ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The public registration information of the ship', roots={'/components/schemas/ShipRegistration', 'ShipRegistration'}, required_properties=[StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description="The agent's registered name of the ship", example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction the ship is registered with', example=None, max_length=None, pattern=None), EnumProperty(name='role', required=True, nullable=False, python_name='role', description='The registered role of the ship', example=None, values={'FABRICATOR': 'FABRICATOR', 'HARVESTER': 'HARVESTER', 'HAULER': 'HAULER', 'INTERCEPTOR': 'INTERCEPTOR', 'EXCAVATOR': 'EXCAVATOR', 'TRANSPORT': 'TRANSPORT', 'REPAIR': 'REPAIR', 'SURVEYOR': 'SURVEYOR', 'COMMAND': 'COMMAND', 'CARRIER': 'CARRIER', 'PATROL': 'PATROL', 'SATELLITE': 'SATELLITE', 'EXPLORER': 'EXPLORER', 'REFINERY': 'REFINERY'}, class_info=Class(name='ShipRole', module_name='ship_role'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_role import ShipRole'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast', 'import datetime'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from typing import Dict', 'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from ..models.ship_nav_status import ShipNavStatus', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='crew', required=True, nullable=False, default=None, python_name='crew', example=None, class_info=Class(name='ShipCrew', module_name='ship_crew'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'required', 'capacity', 'rotation', 'morale', 'wages'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The current number of crew members on the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The minimum number of crew members required to maintain the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum number of crew members the ship can support.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'rotation': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['STRICT', 'RELAXED'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", schema_format=None, default='STRICT', nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'morale': Schema(title=None, multipleOf=None, maximum=100.0, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'wages': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The ship's crew service and maintain the ship's systems and equipment.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The ship's crew service and maintain the ship's systems and equipment.", roots={'/components/schemas/ShipCrew', 'ShipCrew'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description='The current number of crew members on the ship.', example=None), IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description='The minimum number of crew members required to maintain the ship.', example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The maximum number of crew members the ship can support.', example=None), EnumProperty(name='rotation', required=True, nullable=False, python_name='rotation', description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", example=None, values={'STRICT': 'STRICT', 'RELAXED': 'RELAXED'}, class_info=Class(name='ShipCrewRotation', module_name='ship_crew_rotation'), value_type=<class 'str'>, default='ShipCrewRotation.STRICT'), IntProperty(name='morale', required=True, nullable=False, default=None, python_name='morale', description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", example=None), IntProperty(name='wages', required=True, nullable=False, default=None, python_name='wages', description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', example=None)], optional_properties=[], relative_imports={'from ..models.ship_crew_rotation import ShipCrewRotation'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='frame', required=True, nullable=False, default=None, python_name='frame', example=None, class_info=Class(name='ShipFrame', module_name='ship_frame'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'moduleSlots', 'mountingPoints', 'fuelCapacity', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'moduleSlots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mountingPoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fuelCapacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', roots={'/components/schemas/ShipFrame', 'ShipFrame'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the frame.', example=None, values={'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER'}, class_info=Class(name='ShipFrameSymbol', module_name='ship_frame_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the frame.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the frame.', example=None, max_length=None, pattern=None), IntProperty(name='moduleSlots', required=True, nullable=False, default=None, python_name='module_slots', description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', example=None), IntProperty(name='mountingPoints', required=True, nullable=False, default=None, python_name='mounting_points', description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', example=None), IntProperty(name='fuelCapacity', required=True, nullable=False, default=None, python_name='fuel_capacity', description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..models.ship_frame_symbol import ShipFrameSymbol', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='reactor', required=True, nullable=False, default=None, python_name='reactor', example=None, class_info=Class(name='ShipReactor', module_name='ship_reactor'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'powerOutput', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'powerOutput': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", roots={'/components/schemas/ShipReactor', 'ShipReactor'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the reactor.', example=None, values={'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I'}, class_info=Class(name='ShipReactorSymbol', module_name='ship_reactor_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the reactor.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the reactor.', example=None, max_length=None, pattern=None), IntProperty(name='powerOutput', required=True, nullable=False, default=None, python_name='power_output', description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_reactor_symbol import ShipReactorSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='engine', required=True, nullable=False, default=None, python_name='engine', example=None, class_info=Class(name='ShipEngine', module_name='ship_engine'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'speed', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'speed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The engine determines how quickly a ship travels between waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The engine determines how quickly a ship travels between waypoints.', roots={'/components/schemas/ShipEngine', 'ShipEngine'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the engine.', example=None, values={'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I'}, class_info=Class(name='ShipEngineSymbol', module_name='ship_engine_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the engine.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the engine.', example=None, max_length=None, pattern=None), IntProperty(name='speed', required=True, nullable=False, default=None, python_name='speed', description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict', 'from ..models.ship_engine_symbol import ShipEngineSymbol'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modules', required=True, nullable=False, default=None, python_name='modules', description='Modules installed in this ship.', example=None, inner_property=ModelProperty(name='modules_item', required=True, nullable=False, default=None, python_name='modules_item', example=None, class_info=Class(name='ShipModule', module_name='ship_module'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'range': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', roots={'ShipModule', '/components/schemas/ShipModule'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the module.', example=None, values={'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II'}, class_info=Class(name='ShipModuleSymbol', module_name='ship_module_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this module.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of this module.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='capacity', required=False, nullable=False, default=None, python_name='capacity', description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', example=None), IntProperty(name='range', required=False, nullable=False, default=None, python_name='range_', description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_module_symbol import ShipModuleSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description='Mounts installed in this ship.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo import ShipCargo', 'from ..models.cooldown import Cooldown', 'from ..models.ship_frame import ShipFrame', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_nav import ShipNav', 'from ..models.ship_registration import ShipRegistration', 'from ..models.ship_crew import ShipCrew', 'from ..models.ship_engine import ShipEngine', 'from ..models.ship_reactor import ShipReactor', 'from ..models.ship_fuel import ShipFuel', 'from ..models.ship_module import ShipModule'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='meta', required=True, nullable=False, default=None, python_name='meta', example=None, class_info=Class(name='Meta', module_name='meta'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['total', 'page', 'limit'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'total': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Shows the total amount of items of this kind that exist.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'page': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', schema_format=None, default=1, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'limit': Schema(title=None, multipleOf=None, maximum=20.0, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of items in each page. Limits how many items can be fetched at once.', schema_format=None, default=10, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Meta details for pagination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None, x-examples={'example-1': {'total': 6, 'page': 1, 'limit': 20}}), description='Meta details for pagination.', roots={'Meta', '/components/schemas/Meta'}, required_properties=[IntProperty(name='total', required=True, nullable=False, default=None, python_name='total', description='Shows the total amount of items of this kind that exist.', example=None), IntProperty(name='page', required=True, nullable=False, default=1, python_name='page', description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', example=None), IntProperty(name='limit', required=True, nullable=False, default=10, python_name='limit', description='The amount of items in each page. Limits how many items can be fetched at once.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship import Ship', 'from ..models.meta import Meta'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'page', 'limit'})
# Endpoint(path='/my/ships/{shipSymbol}/chart', method='post', description="Command a ship to chart the waypoint at its current location.\n\nMost waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.\n\nCharting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint's traits.", name='create-chart', requires_security=True, tag='fleet', summary='Create Chart', relative_imports={'from ...models.create_chart_response_201 import CreateChartResponse201', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='CreateChartResponse201', module_name='create_chart_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['chart', 'waypoint'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'chart': Reference(ref='#/components/schemas/Chart'), 'waypoint': Reference(ref='#/components/schemas/Waypoint')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateChartResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='CreateChartResponse201Data', module_name='create_chart_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['chart', 'waypoint'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'chart': Reference(ref='#/components/schemas/Chart'), 'waypoint': Reference(ref='#/components/schemas/Waypoint')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateChartResponse201', 'CreateChartResponse201Data'}, required_properties=[ModelProperty(name='chart', required=True, nullable=False, default=None, python_name='chart', example=None, class_info=Class(name='Chart', module_name='chart'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'submittedBy': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The agent that submitted the chart for this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'submittedOn': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time the chart for this waypoint was submitted.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The chart of a system or waypoint, which makes the location visible to other agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The chart of a system or waypoint, which makes the location visible to other agents.', roots={'Chart', '/components/schemas/Chart'}, required_properties=[], optional_properties=[StringProperty(name='waypointSymbol', required=False, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='submittedBy', required=False, nullable=False, default=None, python_name='submitted_by', description='The agent that submitted the chart for this waypoint.', example=None, max_length=None, pattern=None), DateTimeProperty(name='submittedOn', required=False, nullable=False, default=None, python_name='submitted_on', description='The time the chart for this waypoint was submitted.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='waypoint', required=True, nullable=False, default=None, python_name='waypoint', example=None, class_info=Class(name='Waypoint', module_name='waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y', 'orbitals', 'traits', 'isUnderConstruction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbitals': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointOrbital'), properties=None, additionalProperties=None, description='Waypoints that orbit this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'faction': Reference(ref='#/components/schemas/WaypointFaction'), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointTrait'), properties=None, additionalProperties=None, description='The traits of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'modifiers': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointModifier'), properties=None, additionalProperties=None, description='The modifiers of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chart': Reference(ref='#/components/schemas/Chart'), 'isUnderConstruction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='True if the waypoint is under construction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.', roots={'/components/schemas/Waypoint', 'Waypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", example=None), ListProperty(name='orbitals', required=True, nullable=False, default=None, python_name='orbitals', description='Waypoints that orbit this waypoint.', example=None, inner_property=ModelProperty(name='orbitals_item', required=True, nullable=False, default=None, python_name='orbitals_item', example=None, class_info=Class(name='WaypointOrbital', module_name='waypoint_orbital'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the orbiting waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An orbital is another waypoint that orbits a parent waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An orbital is another waypoint that orbits a parent waypoint.', roots={'/components/schemas/WaypointOrbital', 'WaypointOrbital'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the orbiting waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='The traits of the waypoint.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='WaypointTrait', module_name='waypoint_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WaypointTrait', '/components/schemas/WaypointTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'UNCHARTED': 'UNCHARTED', 'UNDER_CONSTRUCTION': 'UNDER_CONSTRUCTION', 'MARKETPLACE': 'MARKETPLACE', 'SHIPYARD': 'SHIPYARD', 'OUTPOST': 'OUTPOST', 'SCATTERED_SETTLEMENTS': 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES': 'SPRAWLING_CITIES', 'MEGA_STRUCTURES': 'MEGA_STRUCTURES', 'PIRATE_BASE': 'PIRATE_BASE', 'OVERCROWDED': 'OVERCROWDED', 'HIGH_TECH': 'HIGH_TECH', 'CORRUPT': 'CORRUPT', 'BUREAUCRATIC': 'BUREAUCRATIC', 'TRADING_HUB': 'TRADING_HUB', 'INDUSTRIAL': 'INDUSTRIAL', 'BLACK_MARKET': 'BLACK_MARKET', 'RESEARCH_FACILITY': 'RESEARCH_FACILITY', 'MILITARY_BASE': 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST': 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST': 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS': 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS': 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS': 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS': 'RARE_METAL_DEPOSITS', 'METHANE_POOLS': 'METHANE_POOLS', 'ICE_CRYSTALS': 'ICE_CRYSTALS', 'EXPLOSIVE_GASES': 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE': 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS': 'VIBRANT_AURORAS', 'SALT_FLATS': 'SALT_FLATS', 'CANYONS': 'CANYONS', 'PERPETUAL_DAYLIGHT': 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST': 'PERPETUAL_OVERCAST', 'DRY_SEABEDS': 'DRY_SEABEDS', 'MAGMA_SEAS': 'MAGMA_SEAS', 'SUPERVOLCANOES': 'SUPERVOLCANOES', 'ASH_CLOUDS': 'ASH_CLOUDS', 'VAST_RUINS': 'VAST_RUINS', 'MUTATED_FLORA': 'MUTATED_FLORA', 'TERRAFORMED': 'TERRAFORMED', 'EXTREME_TEMPERATURES': 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE': 'EXTREME_PRESSURE', 'DIVERSE_LIFE': 'DIVERSE_LIFE', 'SCARCE_LIFE': 'SCARCE_LIFE', 'FOSSILS': 'FOSSILS', 'WEAK_GRAVITY': 'WEAK_GRAVITY', 'STRONG_GRAVITY': 'STRONG_GRAVITY', 'CRUSHING_GRAVITY': 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE': 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE': 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE': 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE': 'THIN_ATMOSPHERE', 'JOVIAN': 'JOVIAN', 'ROCKY': 'ROCKY', 'VOLCANIC': 'VOLCANIC', 'FROZEN': 'FROZEN', 'SWAMP': 'SWAMP', 'BARREN': 'BARREN', 'TEMPERATE': 'TEMPERATE', 'JUNGLE': 'JUNGLE', 'OCEAN': 'OCEAN', 'RADIOACTIVE': 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES': 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER': 'DEBRIS_CLUSTER', 'DEEP_CRATERS': 'DEEP_CRATERS', 'SHALLOW_CRATERS': 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION': 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR': 'HOLLOWED_INTERIOR', 'STRIPPED': 'STRIPPED'}, class_info=Class(name='WaypointTraitSymbol', module_name='waypoint_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_trait_symbol import WaypointTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isUnderConstruction', required=True, nullable=False, default=None, python_name='is_under_construction', description='True if the waypoint is under construction.', example=None)], optional_properties=[StringProperty(name='orbits', required=False, nullable=False, default=None, python_name='orbits', description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', example=None, max_length=None, pattern=None), ModelProperty(name='faction', required=False, nullable=False, default=None, python_name='faction', example=None, class_info=Class(name='WaypointFaction', module_name='waypoint_faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol')}, additionalProperties=None, description='The faction that controls the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The faction that controls the waypoint.', roots={'/components/schemas/WaypointFaction', 'WaypointFaction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modifiers', required=False, nullable=False, default=None, python_name='modifiers', description='The modifiers of the waypoint.', example=None, inner_property=ModelProperty(name='modifiers_item', required=True, nullable=False, default=None, python_name='modifiers_item', example=None, class_info=Class(name='WaypointModifier', module_name='waypoint_modifier'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointModifierSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/WaypointModifier', 'WaypointModifier'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the modifier.', example=None, values={'STRIPPED': 'STRIPPED', 'UNSTABLE': 'UNSTABLE', 'RADIATION_LEAK': 'RADIATION_LEAK', 'CRITICAL_LIMIT': 'CRITICAL_LIMIT', 'CIVIL_UNREST': 'CIVIL_UNREST'}, class_info=Class(name='WaypointModifierSymbol', module_name='waypoint_modifier_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_modifier_symbol import WaypointModifierSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ModelProperty(name='chart', required=False, nullable=False, default=None, python_name='chart', example=None, class_info=Class(name='Chart', module_name='chart'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'submittedBy': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The agent that submitted the chart for this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'submittedOn': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time the chart for this waypoint was submitted.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The chart of a system or waypoint, which makes the location visible to other agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The chart of a system or waypoint, which makes the location visible to other agents.', roots={'Chart', '/components/schemas/Chart'}, required_properties=[], optional_properties=[StringProperty(name='waypointSymbol', required=False, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='submittedBy', required=False, nullable=False, default=None, python_name='submitted_by', description='The agent that submitted the chart for this waypoint.', example=None, max_length=None, pattern=None), DateTimeProperty(name='submittedOn', required=False, nullable=False, default=None, python_name='submitted_on', description='The time the chart for this waypoint was submitted.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.waypoint_type import WaypointType', 'from typing import Dict'}, lazy_imports={'from ..models.waypoint_modifier import WaypointModifier', 'from ..models.waypoint_trait import WaypointTrait', 'from ..models.waypoint_faction import WaypointFaction', 'from ..models.chart import Chart', 'from ..models.waypoint_orbital import WaypointOrbital'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.waypoint import Waypoint', 'from ..models.chart import Chart'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.create_chart_response_201_data import CreateChartResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .create_chart import asyncio_detailed as create_chart_asyncio
from .create_chart import sync_detailed as create_chart

# Endpoint(path='/my/ships/{shipSymbol}/scan/ships', method='post', description='Scan for nearby ships, retrieving information for all ships in range.\n\nRequires a ship to have the `Sensor Array` mount installed to use.\n\nThe ship will enter a cooldown after using this function, during which it cannot execute certain actions.', name='create-ship-ship-scan', requires_security=True, tag='fleet', summary='Scan Ships', relative_imports={'from ...models.create_ship_ship_scan_response_201 import CreateShipShipScanResponse201', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='CreateShipShipScanResponse201', module_name='create_ship_ship_scan_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'ships'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'ships': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ScannedShip'), properties=None, additionalProperties=None, description='List of scanned ships.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateShipShipScanResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='CreateShipShipScanResponse201Data', module_name='create_ship_ship_scan_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'ships'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'ships': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ScannedShip'), properties=None, additionalProperties=None, description='List of scanned ships.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateShipShipScanResponse201Data', 'CreateShipShipScanResponse201'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='ships', required=True, nullable=False, default=None, python_name='ships', description='List of scanned ships.', example=None, inner_property=ModelProperty(name='ships_item', required=True, nullable=False, default=None, python_name='ships_item', example=None, class_info=Class(name='ScannedShip', module_name='scanned_ship'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'registration', 'nav', 'engine'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The globally unique identifier of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'registration': Reference(ref='#/components/schemas/ShipRegistration'), 'nav': Reference(ref='#/components/schemas/ShipNav'), 'frame': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The frame of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'reactor': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The reactor of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'engine': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The engine of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A mount on the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='List of mounts installed in the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The ship that was scanned. Details include information about the ship that could be detected by the scanner.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The ship that was scanned. Details include information about the ship that could be detected by the scanner.', roots={'/components/schemas/ScannedShip', 'ScannedShip'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The globally unique identifier of the ship.', example=None, max_length=None, pattern=None), ModelProperty(name='registration', required=True, nullable=False, default=None, python_name='registration', example=None, class_info=Class(name='ShipRegistration', module_name='ship_registration'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'factionSymbol', 'role'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The agent's registered name of the ship", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction the ship is registered with', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'role': Reference(ref='#/components/schemas/ShipRole')}, additionalProperties=None, description='The public registration information of the ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The public registration information of the ship', roots={'/components/schemas/ShipRegistration', 'ShipRegistration'}, required_properties=[StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description="The agent's registered name of the ship", example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction the ship is registered with', example=None, max_length=None, pattern=None), EnumProperty(name='role', required=True, nullable=False, python_name='role', description='The registered role of the ship', example=None, values={'FABRICATOR': 'FABRICATOR', 'HARVESTER': 'HARVESTER', 'HAULER': 'HAULER', 'INTERCEPTOR': 'INTERCEPTOR', 'EXCAVATOR': 'EXCAVATOR', 'TRANSPORT': 'TRANSPORT', 'REPAIR': 'REPAIR', 'SURVEYOR': 'SURVEYOR', 'COMMAND': 'COMMAND', 'CARRIER': 'CARRIER', 'PATROL': 'PATROL', 'SATELLITE': 'SATELLITE', 'EXPLORER': 'EXPLORER', 'REFINERY': 'REFINERY'}, class_info=Class(name='ShipRole', module_name='ship_role'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_role import ShipRole'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='engine', required=True, nullable=False, default=None, python_name='engine', example=None, class_info=Class(name='ScannedShipEngine', module_name='scanned_ship_engine'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The engine of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The engine of the ship.', roots={'/components/schemas/ScannedShip', 'ScannedShip', 'ScannedShipEngine'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the engine.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ModelProperty(name='frame', required=False, nullable=False, default=None, python_name='frame', example=None, class_info=Class(name='ScannedShipFrame', module_name='scanned_ship_frame'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The frame of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The frame of the ship.', roots={'ScannedShipFrame', '/components/schemas/ScannedShip', 'ScannedShip'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the frame.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='reactor', required=False, nullable=False, default=None, python_name='reactor', example=None, class_info=Class(name='ScannedShipReactor', module_name='scanned_ship_reactor'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The reactor of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The reactor of the ship.', roots={'/components/schemas/ScannedShip', 'ScannedShip', 'ScannedShipReactor'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the reactor.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='mounts', required=False, nullable=False, default=None, python_name='mounts', description='List of mounts installed in the ship.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ScannedShipMountsItem', module_name='scanned_ship_mounts_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A mount on the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount on the ship.', roots={'/components/schemas/ScannedShip', 'ScannedShip', 'ScannedShipMountsItem'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the mount.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.scanned_ship_frame import ScannedShipFrame', 'from ..models.ship_nav import ShipNav', 'from ..models.ship_registration import ShipRegistration', 'from ..models.scanned_ship_mounts_item import ScannedShipMountsItem', 'from ..models.scanned_ship_engine import ScannedShipEngine', 'from ..models.scanned_ship_reactor import ScannedShipReactor'}, additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown', 'from ..models.scanned_ship import ScannedShip'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.create_ship_ship_scan_response_201_data import CreateShipShipScanResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .create_ship_ship_scan import asyncio_detailed as create_ship_ship_scan_asyncio
from .create_ship_ship_scan import sync_detailed as create_ship_ship_scan

# Endpoint(path='/my/ships/{shipSymbol}/scan/systems', method='post', description="Scan for nearby systems, retrieving information on the systems' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.\n\nThe ship will enter a cooldown after using this function, during which it cannot execute certain actions.", name='create-ship-system-scan', requires_security=True, tag='fleet', summary='Scan Systems', relative_imports={'from typing import Dict', 'from ...models.create_ship_system_scan_response_201 import CreateShipSystemScanResponse201', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='CreateShipSystemScanResponse201', module_name='create_ship_system_scan_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'systems'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'systems': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ScannedSystem'), properties=None, additionalProperties=None, description='List of scanned systems.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateShipSystemScanResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='CreateShipSystemScanResponse201Data', module_name='create_ship_system_scan_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'systems'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'systems': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ScannedSystem'), properties=None, additionalProperties=None, description='List of scanned systems.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateShipSystemScanResponse201', 'CreateShipSystemScanResponse201Data'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='systems', required=True, nullable=False, default=None, python_name='systems', description='List of scanned systems.', example=None, inner_property=ModelProperty(name='systems_item', required=True, nullable=False, default=None, python_name='systems_item', example=None, class_info=Class(name='ScannedSystem', module_name='scanned_system'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'sectorSymbol', 'type', 'x', 'y', 'distance'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'sectorSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Symbol of the system's sector.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/SystemType'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'distance': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The system's distance from the scanning ship.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Details of a system was that scanned.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Details of a system was that scanned.', roots={'ScannedSystem', '/components/schemas/ScannedSystem'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='sectorSymbol', required=True, nullable=False, default=None, python_name='sector_symbol', description="Symbol of the system's sector.", example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of system.', example=None, values={'NEUTRON_STAR': 'NEUTRON_STAR', 'RED_STAR': 'RED_STAR', 'ORANGE_STAR': 'ORANGE_STAR', 'BLUE_STAR': 'BLUE_STAR', 'YOUNG_STAR': 'YOUNG_STAR', 'WHITE_DWARF': 'WHITE_DWARF', 'BLACK_HOLE': 'BLACK_HOLE', 'HYPERGIANT': 'HYPERGIANT', 'NEBULA': 'NEBULA', 'UNSTABLE': 'UNSTABLE'}, class_info=Class(name='SystemType', module_name='system_type'), value_type=<class 'str'>, default=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None), IntProperty(name='distance', required=True, nullable=False, default=None, python_name='distance', description="The system's distance from the scanning ship.", example=None)], optional_properties=[], relative_imports={'from ..models.system_type import SystemType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown', 'from ..models.scanned_system import ScannedSystem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.create_ship_system_scan_response_201_data import CreateShipSystemScanResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .create_ship_system_scan import asyncio_detailed as create_ship_system_scan_asyncio
from .create_ship_system_scan import sync_detailed as create_ship_system_scan

# Endpoint(path='/my/ships/{shipSymbol}/scan/waypoints', method='post', description="Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints' traits.\n\nRequires a ship to have the `Sensor Array` mount installed to use.\n\nThe ship will enter a cooldown after using this function, during which it cannot execute certain actions.", name='create-ship-waypoint-scan', requires_security=True, tag='fleet', summary='Scan Waypoints', relative_imports={'from ...models.create_ship_waypoint_scan_response_201 import CreateShipWaypointScanResponse201', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='CreateShipWaypointScanResponse201', module_name='create_ship_waypoint_scan_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'waypoints'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'waypoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ScannedWaypoint'), properties=None, additionalProperties=None, description='List of scanned waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateShipWaypointScanResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='CreateShipWaypointScanResponse201Data', module_name='create_ship_waypoint_scan_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'waypoints'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'waypoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ScannedWaypoint'), properties=None, additionalProperties=None, description='List of scanned waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateShipWaypointScanResponse201', 'CreateShipWaypointScanResponse201Data'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='waypoints', required=True, nullable=False, default=None, python_name='waypoints', description='List of scanned waypoints.', example=None, inner_property=ModelProperty(name='waypoints_item', required=True, nullable=False, default=None, python_name='waypoints_item', example=None, class_info=Class(name='ScannedWaypoint', module_name='scanned_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y', 'orbitals', 'traits'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbitals': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointOrbital'), properties=None, additionalProperties=None, description='List of waypoints that orbit this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'faction': Reference(ref='#/components/schemas/WaypointFaction'), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointTrait'), properties=None, additionalProperties=None, description='The traits of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chart': Reference(ref='#/components/schemas/Chart')}, additionalProperties=None, description='A waypoint that was scanned by a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A waypoint that was scanned by a ship.', roots={'/components/schemas/ScannedWaypoint', 'ScannedWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None), ListProperty(name='orbitals', required=True, nullable=False, default=None, python_name='orbitals', description='List of waypoints that orbit this waypoint.', example=None, inner_property=ModelProperty(name='orbitals_item', required=True, nullable=False, default=None, python_name='orbitals_item', example=None, class_info=Class(name='WaypointOrbital', module_name='waypoint_orbital'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the orbiting waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An orbital is another waypoint that orbits a parent waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An orbital is another waypoint that orbits a parent waypoint.', roots={'/components/schemas/WaypointOrbital', 'WaypointOrbital'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the orbiting waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='The traits of the waypoint.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='WaypointTrait', module_name='waypoint_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WaypointTrait', '/components/schemas/WaypointTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'UNCHARTED': 'UNCHARTED', 'UNDER_CONSTRUCTION': 'UNDER_CONSTRUCTION', 'MARKETPLACE': 'MARKETPLACE', 'SHIPYARD': 'SHIPYARD', 'OUTPOST': 'OUTPOST', 'SCATTERED_SETTLEMENTS': 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES': 'SPRAWLING_CITIES', 'MEGA_STRUCTURES': 'MEGA_STRUCTURES', 'PIRATE_BASE': 'PIRATE_BASE', 'OVERCROWDED': 'OVERCROWDED', 'HIGH_TECH': 'HIGH_TECH', 'CORRUPT': 'CORRUPT', 'BUREAUCRATIC': 'BUREAUCRATIC', 'TRADING_HUB': 'TRADING_HUB', 'INDUSTRIAL': 'INDUSTRIAL', 'BLACK_MARKET': 'BLACK_MARKET', 'RESEARCH_FACILITY': 'RESEARCH_FACILITY', 'MILITARY_BASE': 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST': 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST': 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS': 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS': 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS': 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS': 'RARE_METAL_DEPOSITS', 'METHANE_POOLS': 'METHANE_POOLS', 'ICE_CRYSTALS': 'ICE_CRYSTALS', 'EXPLOSIVE_GASES': 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE': 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS': 'VIBRANT_AURORAS', 'SALT_FLATS': 'SALT_FLATS', 'CANYONS': 'CANYONS', 'PERPETUAL_DAYLIGHT': 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST': 'PERPETUAL_OVERCAST', 'DRY_SEABEDS': 'DRY_SEABEDS', 'MAGMA_SEAS': 'MAGMA_SEAS', 'SUPERVOLCANOES': 'SUPERVOLCANOES', 'ASH_CLOUDS': 'ASH_CLOUDS', 'VAST_RUINS': 'VAST_RUINS', 'MUTATED_FLORA': 'MUTATED_FLORA', 'TERRAFORMED': 'TERRAFORMED', 'EXTREME_TEMPERATURES': 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE': 'EXTREME_PRESSURE', 'DIVERSE_LIFE': 'DIVERSE_LIFE', 'SCARCE_LIFE': 'SCARCE_LIFE', 'FOSSILS': 'FOSSILS', 'WEAK_GRAVITY': 'WEAK_GRAVITY', 'STRONG_GRAVITY': 'STRONG_GRAVITY', 'CRUSHING_GRAVITY': 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE': 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE': 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE': 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE': 'THIN_ATMOSPHERE', 'JOVIAN': 'JOVIAN', 'ROCKY': 'ROCKY', 'VOLCANIC': 'VOLCANIC', 'FROZEN': 'FROZEN', 'SWAMP': 'SWAMP', 'BARREN': 'BARREN', 'TEMPERATE': 'TEMPERATE', 'JUNGLE': 'JUNGLE', 'OCEAN': 'OCEAN', 'RADIOACTIVE': 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES': 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER': 'DEBRIS_CLUSTER', 'DEEP_CRATERS': 'DEEP_CRATERS', 'SHALLOW_CRATERS': 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION': 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR': 'HOLLOWED_INTERIOR', 'STRIPPED': 'STRIPPED'}, class_info=Class(name='WaypointTraitSymbol', module_name='waypoint_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_trait_symbol import WaypointTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[ModelProperty(name='faction', required=False, nullable=False, default=None, python_name='faction', example=None, class_info=Class(name='WaypointFaction', module_name='waypoint_faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol')}, additionalProperties=None, description='The faction that controls the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The faction that controls the waypoint.', roots={'/components/schemas/WaypointFaction', 'WaypointFaction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='chart', required=False, nullable=False, default=None, python_name='chart', example=None, class_info=Class(name='Chart', module_name='chart'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'submittedBy': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The agent that submitted the chart for this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'submittedOn': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time the chart for this waypoint was submitted.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The chart of a system or waypoint, which makes the location visible to other agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The chart of a system or waypoint, which makes the location visible to other agents.', roots={'Chart', '/components/schemas/Chart'}, required_properties=[], optional_properties=[StringProperty(name='waypointSymbol', required=False, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='submittedBy', required=False, nullable=False, default=None, python_name='submitted_by', description='The agent that submitted the chart for this waypoint.', example=None, max_length=None, pattern=None), DateTimeProperty(name='submittedOn', required=False, nullable=False, default=None, python_name='submitted_on', description='The time the chart for this waypoint was submitted.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.waypoint_type import WaypointType', 'from typing import Dict'}, lazy_imports={'from ..models.waypoint_trait import WaypointTrait', 'from ..models.waypoint_faction import WaypointFaction', 'from ..models.chart import Chart', 'from ..models.waypoint_orbital import WaypointOrbital'}, additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown', 'from ..models.scanned_waypoint import ScannedWaypoint'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.create_ship_waypoint_scan_response_201_data import CreateShipWaypointScanResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .create_ship_waypoint_scan import (
    asyncio_detailed as create_ship_waypoint_scan_asyncio,
)
from .create_ship_waypoint_scan import sync_detailed as create_ship_waypoint_scan

# Endpoint(path='/my/ships/{shipSymbol}/survey', method='post', description="Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.\n\nIn order to use a survey, send the entire survey details in the body of the extract request.\n\nEach survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.\n\nYour ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey's size. Multiple ships can use the same survey for extraction.\n\nA ship must have the `Surveyor` mount installed in order to use this function.", name='create-survey', requires_security=True, tag='fleet', summary='Create Survey', relative_imports={'from typing import Dict', 'from ...models.create_survey_response_201 import CreateSurveyResponse201', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='CreateSurveyResponse201', module_name='create_survey_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'surveys'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'surveys': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/Survey'), properties=None, additionalProperties=None, description='Surveys created by this action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateSurveyResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='CreateSurveyResponse201Data', module_name='create_survey_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cooldown', 'surveys'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'surveys': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/Survey'), properties=None, additionalProperties=None, description='Surveys created by this action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'CreateSurveyResponse201Data', 'CreateSurveyResponse201'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='surveys', required=True, nullable=False, default=None, python_name='surveys', description='Surveys created by this action.', example=None, inner_property=ModelProperty(name='surveys_item', required=True, nullable=False, default=None, python_name='surveys_item', example=None, class_info=Class(name='Survey', module_name='survey'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['signature', 'symbol', 'deposits', 'expiration', 'size'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'signature': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint that this survey is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SurveyDeposit'), properties=None, additionalProperties=None, description='A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'size': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['SMALL', 'MODERATE', 'LARGE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.', roots={'Survey', '/components/schemas/Survey'}, required_properties=[StringProperty(name='signature', required=True, nullable=False, default=None, python_name='signature', description='A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.', example=None, max_length=None, pattern=None), StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint that this survey is for.', example=None, max_length=None, pattern=None), ListProperty(name='deposits', required=True, nullable=False, default=None, python_name='deposits', description='A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.', example=None, inner_property=ModelProperty(name='deposits_item', required=True, nullable=False, default=None, python_name='deposits_item', example=None, class_info=Class(name='SurveyDeposit', module_name='survey_deposit'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the deposit.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A surveyed deposit of a mineral or resource available for extraction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A surveyed deposit of a mineral or resource available for extraction.', roots={'SurveyDeposit', '/components/schemas/SurveyDeposit'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the deposit.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.', example=None), EnumProperty(name='size', required=True, nullable=False, python_name='size', description='The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.', example=None, values={'SMALL': 'SMALL', 'MODERATE': 'MODERATE', 'LARGE': 'LARGE'}, class_info=Class(name='SurveySize', module_name='survey_size'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from typing import cast, List', 'from ..models.survey_size import SurveySize', 'from typing import cast', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.survey_deposit import SurveyDeposit'}, additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.survey import Survey', 'from ..models.cooldown import Cooldown'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.create_survey_response_201_data import CreateSurveyResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .create_survey import asyncio_detailed as create_survey_asyncio
from .create_survey import sync_detailed as create_survey

# Endpoint(path='/my/ships/{shipSymbol}/dock', method='post', description='Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.\n\nDocked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.\n\nThe endpoint is idempotent - successive calls will succeed even if the ship is already docked.', name='dock-ship', requires_security=True, tag='fleet', summary='Dock Ship', relative_imports={'from typing import Dict', 'from ...models.dock_ship_dock_ship_200_response import DockShipDockShip200Response', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='DockShipDockShip200Response', module_name='dock_ship_dock_ship_200_response'), data=Schema(title='Dock Ship 200 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'DockShipDockShip200Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='DockShipDockShip200ResponseData', module_name='dock_ship_dock_ship_200_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'DockShipDockShip200Response', 'DockShipDockShip200ResponseData'}, required_properties=[ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav import ShipNav'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.dock_ship_dock_ship_200_response_data import DockShipDockShip200ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .dock_ship import asyncio_detailed as dock_ship_asyncio
from .dock_ship import sync_detailed as dock_ship

# Endpoint(path='/my/ships/{shipSymbol}/extract', method='post', description='Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.\n\nThe ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.\n\nThe survey property is now deprecated. See the `extract/survey` endpoint for more details.', name='extract-resources', requires_security=True, tag='fleet', summary='Extract Resources', relative_imports={'from ...models.extract_resources_json_body import ExtractResourcesJsonBody', 'from typing import Dict', 'from ...models.extract_resources_response_201 import ExtractResourcesResponse201', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='ExtractResourcesResponse201', module_name='extract_resources_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['extraction', 'cooldown', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'extraction': Reference(ref='#/components/schemas/Extraction'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ExtractResourcesResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='ExtractResourcesResponse201Data', module_name='extract_resources_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['extraction', 'cooldown', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'extraction': Reference(ref='#/components/schemas/Extraction'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ExtractResourcesResponse201', 'ExtractResourcesResponse201Data'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='extraction', required=True, nullable=False, default=None, python_name='extraction', example=None, class_info=Class(name='Extraction', module_name='extraction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'yield'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the ship that executed the extraction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'yield': Reference(ref='#/components/schemas/ExtractionYield')}, additionalProperties=None, description='Extraction details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Extraction details.', roots={'Extraction', '/components/schemas/Extraction'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='Symbol of the ship that executed the extraction.', example=None, max_length=None, pattern=None), ModelProperty(name='yield', required=True, nullable=False, default=None, python_name='yield_', example=None, class_info=Class(name='ExtractionYield', module_name='extraction_yield'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The number of units extracted that were placed into the ship's cargo hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A yield from the extraction operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A yield from the extraction operation.', roots={'/components/schemas/ExtractionYield', 'ExtractionYield'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description="The number of units extracted that were placed into the ship's cargo hold.", example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.extraction_yield import ExtractionYield'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown', 'from ..models.extraction import Extraction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.extract_resources_response_201_data import ExtractResourcesResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='ExtractResourcesJsonBody', module_name='extract_resources_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'survey': Reference(ref='#/components/schemas/Survey', deprecated=True)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ExtractResourcesJsonBody'}, required_properties=[], optional_properties=[ModelProperty(name='survey', required=False, nullable=False, default=None, python_name='survey', example=None, class_info=Class(name='Survey', module_name='survey'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['signature', 'symbol', 'deposits', 'expiration', 'size'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'signature': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint that this survey is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SurveyDeposit'), properties=None, additionalProperties=None, description='A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'size': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['SMALL', 'MODERATE', 'LARGE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.', roots={'Survey', '/components/schemas/Survey'}, required_properties=[StringProperty(name='signature', required=True, nullable=False, default=None, python_name='signature', description='A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.', example=None, max_length=None, pattern=None), StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint that this survey is for.', example=None, max_length=None, pattern=None), ListProperty(name='deposits', required=True, nullable=False, default=None, python_name='deposits', description='A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.', example=None, inner_property=ModelProperty(name='deposits_item', required=True, nullable=False, default=None, python_name='deposits_item', example=None, class_info=Class(name='SurveyDeposit', module_name='survey_deposit'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the deposit.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A surveyed deposit of a mineral or resource available for extraction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A surveyed deposit of a mineral or resource available for extraction.', roots={'SurveyDeposit', '/components/schemas/SurveyDeposit'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the deposit.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.', example=None), EnumProperty(name='size', required=True, nullable=False, python_name='size', description='The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.', example=None, values={'SMALL': 'SMALL', 'MODERATE': 'MODERATE', 'LARGE': 'LARGE'}, class_info=Class(name='SurveySize', module_name='survey_size'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from typing import cast, List', 'from ..models.survey_size import SurveySize', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.survey_deposit import SurveyDeposit'}, additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.survey import Survey'}, additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .extract_resources import asyncio_detailed as extract_resources_asyncio
from .extract_resources import sync_detailed as extract_resources

# Endpoint(path='/my/ships/{shipSymbol}/extract/survey', method='post', description='Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.\n\nSend the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.', name='extract-resources-with-survey', requires_security=True, tag='fleet', summary='Extract Resources with Survey', relative_imports={'from ...models.survey import Survey', 'from ...models.extract_resources_with_survey_response_201 import ExtractResourcesWithSurveyResponse201', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='ExtractResourcesWithSurveyResponse201', module_name='extract_resources_with_survey_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['extraction', 'cooldown', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'extraction': Reference(ref='#/components/schemas/Extraction'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ExtractResourcesWithSurveyResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='ExtractResourcesWithSurveyResponse201Data', module_name='extract_resources_with_survey_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['extraction', 'cooldown', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'extraction': Reference(ref='#/components/schemas/Extraction'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ExtractResourcesWithSurveyResponse201', 'ExtractResourcesWithSurveyResponse201Data'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='extraction', required=True, nullable=False, default=None, python_name='extraction', example=None, class_info=Class(name='Extraction', module_name='extraction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'yield'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the ship that executed the extraction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'yield': Reference(ref='#/components/schemas/ExtractionYield')}, additionalProperties=None, description='Extraction details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Extraction details.', roots={'Extraction', '/components/schemas/Extraction'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='Symbol of the ship that executed the extraction.', example=None, max_length=None, pattern=None), ModelProperty(name='yield', required=True, nullable=False, default=None, python_name='yield_', example=None, class_info=Class(name='ExtractionYield', module_name='extraction_yield'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The number of units extracted that were placed into the ship's cargo hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A yield from the extraction operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A yield from the extraction operation.', roots={'/components/schemas/ExtractionYield', 'ExtractionYield'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description="The number of units extracted that were placed into the ship's cargo hold.", example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.extraction_yield import ExtractionYield'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown', 'from ..models.extraction import Extraction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.extract_resources_with_survey_response_201_data import ExtractResourcesWithSurveyResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='Survey', module_name='survey'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['signature', 'symbol', 'deposits', 'expiration', 'size'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'signature': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint that this survey is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SurveyDeposit'), properties=None, additionalProperties=None, description='A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'size': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['SMALL', 'MODERATE', 'LARGE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.', roots={'Survey', '/components/schemas/Survey'}, required_properties=[StringProperty(name='signature', required=True, nullable=False, default=None, python_name='signature', description='A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.', example=None, max_length=None, pattern=None), StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint that this survey is for.', example=None, max_length=None, pattern=None), ListProperty(name='deposits', required=True, nullable=False, default=None, python_name='deposits', description='A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.', example=None, inner_property=ModelProperty(name='deposits_item', required=True, nullable=False, default=None, python_name='deposits_item', example=None, class_info=Class(name='SurveyDeposit', module_name='survey_deposit'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the deposit.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A surveyed deposit of a mineral or resource available for extraction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A surveyed deposit of a mineral or resource available for extraction.', roots={'SurveyDeposit', '/components/schemas/SurveyDeposit'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the deposit.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.', example=None), EnumProperty(name='size', required=True, nullable=False, python_name='size', description='The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.', example=None, values={'SMALL': 'SMALL', 'MODERATE': 'MODERATE', 'LARGE': 'LARGE'}, class_info=Class(name='SurveySize', module_name='survey_size'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from typing import cast, List', 'from ..models.survey_size import SurveySize', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.survey_deposit import SurveyDeposit'}, additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .extract_resources_with_survey import (
    asyncio_detailed as extract_resources_with_survey_asyncio,
)
from .extract_resources_with_survey import (
    sync_detailed as extract_resources_with_survey,
)

# Endpoint(path='/my/ships/{shipSymbol}/mounts', method='get', description='Get the mounts installed on a ship.', name='get-mounts', requires_security=True, tag='fleet', summary='Get Mounts', relative_imports={'from typing import Dict', 'from ...models.get_mounts_get_mounts_200_response import GetMountsGetMounts200Response', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetMountsGetMounts200Response', module_name='get_mounts_get_mounts_200_response'), data=Schema(title='Get Mounts 200 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetMountsGetMounts200Response'}, required_properties=[ListProperty(name='data', required=True, nullable=False, default=None, python_name='data', description=None, example=None, inner_property=ModelProperty(name='data_item', required=True, nullable=False, default=None, python_name='data_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_mount import ShipMount'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .get_mounts import asyncio_detailed as get_mounts_asyncio
from .get_mounts import sync_detailed as get_mounts

# Endpoint(path='/my/ships/{shipSymbol}', method='get', description="Retrieve the details of a ship under your agent's ownership.", name='get-my-ship', requires_security=True, tag='fleet', summary='Get Ship', relative_imports={'from ...models.get_my_ship_response_200 import GetMyShipResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetMyShipResponse200', module_name='get_my_ship_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Ship')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetMyShipResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Ship', module_name='ship'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'registration', 'nav', 'crew', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'cargo', 'fuel', 'cooldown'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'registration': Reference(ref='#/components/schemas/ShipRegistration'), 'nav': Reference(ref='#/components/schemas/ShipNav'), 'crew': Reference(ref='#/components/schemas/ShipCrew'), 'frame': Reference(ref='#/components/schemas/ShipFrame'), 'reactor': Reference(ref='#/components/schemas/ShipReactor'), 'engine': Reference(ref='#/components/schemas/ShipEngine'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'modules': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipModule'), properties=None, additionalProperties=None, description='Modules installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='Mounts installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'fuel': Reference(ref='#/components/schemas/ShipFuel')}, additionalProperties=None, description='Ship details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship details.', roots={'/components/schemas/Ship', 'Ship'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', example=None, max_length=None, pattern=None), ModelProperty(name='registration', required=True, nullable=False, default=None, python_name='registration', example=None, class_info=Class(name='ShipRegistration', module_name='ship_registration'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'factionSymbol', 'role'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The agent's registered name of the ship", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction the ship is registered with', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'role': Reference(ref='#/components/schemas/ShipRole')}, additionalProperties=None, description='The public registration information of the ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The public registration information of the ship', roots={'/components/schemas/ShipRegistration', 'ShipRegistration'}, required_properties=[StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description="The agent's registered name of the ship", example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction the ship is registered with', example=None, max_length=None, pattern=None), EnumProperty(name='role', required=True, nullable=False, python_name='role', description='The registered role of the ship', example=None, values={'FABRICATOR': 'FABRICATOR', 'HARVESTER': 'HARVESTER', 'HAULER': 'HAULER', 'INTERCEPTOR': 'INTERCEPTOR', 'EXCAVATOR': 'EXCAVATOR', 'TRANSPORT': 'TRANSPORT', 'REPAIR': 'REPAIR', 'SURVEYOR': 'SURVEYOR', 'COMMAND': 'COMMAND', 'CARRIER': 'CARRIER', 'PATROL': 'PATROL', 'SATELLITE': 'SATELLITE', 'EXPLORER': 'EXPLORER', 'REFINERY': 'REFINERY'}, class_info=Class(name='ShipRole', module_name='ship_role'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_role import ShipRole'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='crew', required=True, nullable=False, default=None, python_name='crew', example=None, class_info=Class(name='ShipCrew', module_name='ship_crew'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'required', 'capacity', 'rotation', 'morale', 'wages'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The current number of crew members on the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The minimum number of crew members required to maintain the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum number of crew members the ship can support.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'rotation': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['STRICT', 'RELAXED'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", schema_format=None, default='STRICT', nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'morale': Schema(title=None, multipleOf=None, maximum=100.0, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'wages': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The ship's crew service and maintain the ship's systems and equipment.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The ship's crew service and maintain the ship's systems and equipment.", roots={'/components/schemas/ShipCrew', 'ShipCrew'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description='The current number of crew members on the ship.', example=None), IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description='The minimum number of crew members required to maintain the ship.', example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The maximum number of crew members the ship can support.', example=None), EnumProperty(name='rotation', required=True, nullable=False, python_name='rotation', description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", example=None, values={'STRICT': 'STRICT', 'RELAXED': 'RELAXED'}, class_info=Class(name='ShipCrewRotation', module_name='ship_crew_rotation'), value_type=<class 'str'>, default='ShipCrewRotation.STRICT'), IntProperty(name='morale', required=True, nullable=False, default=None, python_name='morale', description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", example=None), IntProperty(name='wages', required=True, nullable=False, default=None, python_name='wages', description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', example=None)], optional_properties=[], relative_imports={'from ..models.ship_crew_rotation import ShipCrewRotation'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='frame', required=True, nullable=False, default=None, python_name='frame', example=None, class_info=Class(name='ShipFrame', module_name='ship_frame'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'moduleSlots', 'mountingPoints', 'fuelCapacity', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'moduleSlots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mountingPoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fuelCapacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', roots={'/components/schemas/ShipFrame', 'ShipFrame'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the frame.', example=None, values={'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER'}, class_info=Class(name='ShipFrameSymbol', module_name='ship_frame_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the frame.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the frame.', example=None, max_length=None, pattern=None), IntProperty(name='moduleSlots', required=True, nullable=False, default=None, python_name='module_slots', description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', example=None), IntProperty(name='mountingPoints', required=True, nullable=False, default=None, python_name='mounting_points', description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', example=None), IntProperty(name='fuelCapacity', required=True, nullable=False, default=None, python_name='fuel_capacity', description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..models.ship_frame_symbol import ShipFrameSymbol', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='reactor', required=True, nullable=False, default=None, python_name='reactor', example=None, class_info=Class(name='ShipReactor', module_name='ship_reactor'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'powerOutput', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'powerOutput': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", roots={'/components/schemas/ShipReactor', 'ShipReactor'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the reactor.', example=None, values={'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I'}, class_info=Class(name='ShipReactorSymbol', module_name='ship_reactor_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the reactor.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the reactor.', example=None, max_length=None, pattern=None), IntProperty(name='powerOutput', required=True, nullable=False, default=None, python_name='power_output', description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_reactor_symbol import ShipReactorSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='engine', required=True, nullable=False, default=None, python_name='engine', example=None, class_info=Class(name='ShipEngine', module_name='ship_engine'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'speed', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'speed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The engine determines how quickly a ship travels between waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The engine determines how quickly a ship travels between waypoints.', roots={'/components/schemas/ShipEngine', 'ShipEngine'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the engine.', example=None, values={'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I'}, class_info=Class(name='ShipEngineSymbol', module_name='ship_engine_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the engine.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the engine.', example=None, max_length=None, pattern=None), IntProperty(name='speed', required=True, nullable=False, default=None, python_name='speed', description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict', 'from ..models.ship_engine_symbol import ShipEngineSymbol'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modules', required=True, nullable=False, default=None, python_name='modules', description='Modules installed in this ship.', example=None, inner_property=ModelProperty(name='modules_item', required=True, nullable=False, default=None, python_name='modules_item', example=None, class_info=Class(name='ShipModule', module_name='ship_module'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'range': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', roots={'ShipModule', '/components/schemas/ShipModule'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the module.', example=None, values={'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II'}, class_info=Class(name='ShipModuleSymbol', module_name='ship_module_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this module.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of this module.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='capacity', required=False, nullable=False, default=None, python_name='capacity', description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', example=None), IntProperty(name='range', required=False, nullable=False, default=None, python_name='range_', description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_module_symbol import ShipModuleSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description='Mounts installed in this ship.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo import ShipCargo', 'from ..models.cooldown import Cooldown', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_fuel import ShipFuel', 'from ..models.ship_nav import ShipNav', 'from ..models.ship_registration import ShipRegistration', 'from ..models.ship_crew import ShipCrew', 'from ..models.ship_engine import ShipEngine', 'from ..models.ship_reactor import ShipReactor', 'from ..models.ship_frame import ShipFrame', 'from ..models.ship_module import ShipModule'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship import Ship'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .get_my_ship import asyncio_detailed as get_my_ship_asyncio
from .get_my_ship import sync_detailed as get_my_ship

# Endpoint(path='/my/ships/{shipSymbol}/cargo', method='get', description="Retrieve the cargo of a ship under your agent's ownership.", name='get-my-ship-cargo', requires_security=True, tag='fleet', summary='Get Ship Cargo', relative_imports={'from ...models.get_my_ship_cargo_response_200 import GetMyShipCargoResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetMyShipCargoResponse200', module_name='get_my_ship_cargo_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetMyShipCargoResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .get_my_ship_cargo import asyncio_detailed as get_my_ship_cargo_asyncio
from .get_my_ship_cargo import sync_detailed as get_my_ship_cargo
from .get_my_ships import asyncio_detailed as get_my_ships_asyncio
from .get_my_ships import sync_detailed as get_my_ships

# Endpoint(path='/my/ships/{shipSymbol}/cooldown', method='get', description="Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.\n\nYour ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.\n\nResponse returns a 204 status code (no-content) when the ship has no cooldown.", name='get-ship-cooldown', requires_security=True, tag='fleet', summary='Get Ship Cooldown', relative_imports={'from ...models.get_ship_cooldown_response_200 import GetShipCooldownResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetShipCooldownResponse200', module_name='get_ship_cooldown_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Cooldown')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetShipCooldownResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'}), Response(status_code=<HTTPStatus.NO_CONTENT: 204>, prop=AnyProperty(name='response_204', required=True, nullable=False, default=None, python_name='response_204', description='No cooldown.', example=None), source={'attribute': 'None', 'return_type': 'None'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .get_ship_cooldown import asyncio_detailed as get_ship_cooldown_asyncio
from .get_ship_cooldown import sync_detailed as get_ship_cooldown

# Endpoint(path='/my/ships/{shipSymbol}/nav', method='get', description='Get the current nav status of a ship.', name='get-ship-nav', requires_security=True, tag='fleet', summary='Get Ship Nav', relative_imports={'from typing import Dict', 'from ...models.get_ship_nav_response_200 import GetShipNavResponse200', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetShipNavResponse200', module_name='get_ship_nav_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetShipNavResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav import ShipNav'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .get_ship_nav import asyncio_detailed as get_ship_nav_asyncio
from .get_ship_nav import sync_detailed as get_ship_nav

# Endpoint(path='/my/ships/{shipSymbol}/mounts/install', method='post', description='Install a mount on a ship.\n\nIn order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.\n\nAn installation fee will be deduced by the Shipyard for installing the mount on the ship. ', name='install-mount', requires_security=True, tag='fleet', summary='Install Mount', relative_imports={'from ...models.install_mount_install_mount_201_response import InstallMountInstallMount201Response', 'from typing import Dict', 'from typing import cast', 'from ...models.install_mount_install_mount_request import InstallMountInstallMountRequest'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='InstallMountInstallMount201Response', module_name='install_mount_install_mount_201_response'), data=Schema(title='Install Mount 201 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agent', 'mounts', 'cargo', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='List of installed mounts after the installation of the new mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/ShipModificationTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'InstallMountInstallMount201Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='InstallMountInstallMount201ResponseData', module_name='install_mount_install_mount_201_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agent', 'mounts', 'cargo', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='List of installed mounts after the installation of the new mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/ShipModificationTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'InstallMountInstallMount201ResponseData', 'InstallMountInstallMount201Response'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description='List of installed mounts after the installation of the new mount.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='ShipModificationTransaction', module_name='ship_modification_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint where the transaction took place.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction for a ship modification, such as installing a mount or a module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction for a ship modification, such as installing a mount or a module.', roots={'ShipModificationTransaction', '/components/schemas/ShipModificationTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint where the transaction took place.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_modification_transaction import ShipModificationTransaction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.install_mount_install_mount_201_response_data import InstallMountInstallMount201ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='InstallMountInstallMountRequest', module_name='install_mount_install_mount_request'), data=Schema(title='Install Mount Request', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'InstallMountInstallMountRequest'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description=None, example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .install_mount import asyncio_detailed as install_mount_asyncio
from .install_mount import sync_detailed as install_mount

# Endpoint(path='/my/ships/{shipSymbol}/jettison', method='post', description="Jettison cargo from your ship's cargo hold.", name='jettison', requires_security=True, tag='fleet', summary='Jettison Cargo', relative_imports={'from ...models.jettison_json_body import JettisonJsonBody', 'from ...models.jettison_response_200 import JettisonResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='JettisonResponse200', module_name='jettison_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JettisonResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='JettisonResponse200Data', module_name='jettison_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JettisonResponse200', 'JettisonResponse200Data'}, required_properties=[ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.jettison_response_200_data import JettisonResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='JettisonJsonBody', module_name='jettison_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units to jettison of this good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JettisonJsonBody'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amount of units to jettison of this good.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .jettison import asyncio_detailed as jettison_asyncio
from .jettison import sync_detailed as jettison

# Endpoint(path='/my/ships/{shipSymbol}/jump', method='post', description='Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.\n\nA unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints', name='jump-ship', requires_security=True, tag='fleet', summary='Jump Ship', relative_imports={'from ...models.jump_ship_json_body import JumpShipJsonBody', 'from typing import Dict', 'from ...models.jump_ship_response_200 import JumpShipResponse200', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='JumpShipResponse200', module_name='jump_ship_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav', 'cooldown', 'transaction', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'nav': Reference(ref='#/components/schemas/ShipNav'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction'), 'agent': Reference(ref='#/components/schemas/Agent')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JumpShipResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='JumpShipResponse200Data', module_name='jump_ship_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav', 'cooldown', 'transaction', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'nav': Reference(ref='#/components/schemas/ShipNav'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction'), 'agent': Reference(ref='#/components/schemas/Agent')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JumpShipResponse200Data', 'JumpShipResponse200'}, required_properties=[ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='MarketTransaction', module_name='market_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'type', 'units', 'pricePerUnit', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PURCHASE', 'SELL'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'pricePerUnit': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price per unit of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction with a market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction with a market.', roots={'/components/schemas/MarketTransaction', 'MarketTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of transaction.', example=None, values={'PURCHASE': 'PURCHASE', 'SELL': 'SELL'}, class_info=Class(name='MarketTransactionType', module_name='market_transaction_type'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the transaction.', example=None), IntProperty(name='pricePerUnit', required=True, nullable=False, default=None, python_name='price_per_unit', description='The price per unit of the transaction.', example=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from ..models.market_transaction_type import MarketTransactionType', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.market_transaction import MarketTransaction', 'from ..models.ship_nav import ShipNav', 'from ..models.cooldown import Cooldown'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.jump_ship_response_200_data import JumpShipResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='JumpShipJsonBody', module_name='jump_ship_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint to jump to. The destination must be a connected waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JumpShipJsonBody'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint to jump to. The destination must be a connected waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .jump_ship import asyncio_detailed as jump_ship_asyncio
from .jump_ship import sync_detailed as jump_ship

# Endpoint(path='/my/ships/{shipSymbol}/navigate', method='post', description="Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship's current location. Navigating will consume the necessary fuel from the ship's manifest based on the distance to the target waypoint.\n\nThe returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.\n\nTo travel between systems, see the ship's Warp or Jump actions.", name='navigate-ship', requires_security=True, tag='fleet', summary='Navigate Ship', relative_imports={'from ...models.navigate_ship_response_200 import NavigateShipResponse200', 'from typing import Dict', 'from typing import cast', 'from ...models.navigate_ship_json_body import NavigateShipJsonBody'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='NavigateShipResponse200', module_name='navigate_ship_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav', 'fuel'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'fuel': Reference(ref='#/components/schemas/ShipFuel'), 'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'NavigateShipResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='NavigateShipResponse200Data', module_name='navigate_ship_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav', 'fuel'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'fuel': Reference(ref='#/components/schemas/ShipFuel'), 'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'NavigateShipResponse200', 'NavigateShipResponse200Data'}, required_properties=[ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav import ShipNav', 'from ..models.ship_fuel import ShipFuel'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.navigate_ship_response_200_data import NavigateShipResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='NavigateShipJsonBody', module_name='navigate_ship_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The target destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'NavigateShipJsonBody'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The target destination.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .navigate_ship import asyncio_detailed as navigate_ship_asyncio
from .navigate_ship import sync_detailed as navigate_ship

# Endpoint(path='/my/ships/{shipSymbol}/negotiate/contract', method='post', description='Negotiate a new contract with the HQ.\n\nIn order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.\n\nOnce a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept. \n\nThe ship must be present at any waypoint with a faction present to negotiate a contract with that faction.', name='negotiateContract', requires_security=True, tag='fleet', summary='Negotiate Contract', relative_imports={'from ...models.negotiate_contract_negotiate_contract_200_response import NegotiateContractNegotiateContract200Response', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='NegotiateContractNegotiateContract200Response', module_name='negotiate_contract_negotiate_contract_200_response'), data=Schema(title='Negotiate Contract 200 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'contract': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'NegotiateContractNegotiateContract200Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='NegotiateContractNegotiateContract200ResponseData', module_name='negotiate_contract_negotiate_contract_200_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['contract'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'contract': Reference(ref='#/components/schemas/Contract')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'NegotiateContractNegotiateContract200ResponseData', 'NegotiateContractNegotiateContract200Response'}, required_properties=[ModelProperty(name='contract', required=True, nullable=False, default=None, python_name='contract', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from ..models.contract_type import ContractType', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract import Contract'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.negotiate_contract_negotiate_contract_200_response_data import NegotiateContractNegotiateContract200ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .negotiateContract import asyncio_detailed as negotiateContract_asyncio
from .negotiateContract import sync_detailed as negotiateContract

# Endpoint(path='/my/ships/{shipSymbol}/orbit', method='post', description='Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.\n\nOrbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.\n\nThe endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.', name='orbit-ship', requires_security=True, tag='fleet', summary='Orbit Ship', relative_imports={'from ...models.orbit_ship_orbit_ship_200_response import OrbitShipOrbitShip200Response', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='OrbitShipOrbitShip200Response', module_name='orbit_ship_orbit_ship_200_response'), data=Schema(title='Orbit Ship 200 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'OrbitShipOrbitShip200Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='OrbitShipOrbitShip200ResponseData', module_name='orbit_ship_orbit_ship_200_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'OrbitShipOrbitShip200Response', 'OrbitShipOrbitShip200ResponseData'}, required_properties=[ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav import ShipNav'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.orbit_ship_orbit_ship_200_response_data import OrbitShipOrbitShip200ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .orbit_ship import asyncio_detailed as orbit_ship_asyncio
from .orbit_ship import sync_detailed as orbit_ship

# Endpoint(path='/my/ships/{shipSymbol}/nav', method='patch', description='Update the nav configuration of a ship.\n\nCurrently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.', name='patch-ship-nav', requires_security=True, tag='fleet', summary='Patch Ship Nav', relative_imports={'from ...models.patch_ship_nav_response_200 import PatchShipNavResponse200', 'from typing import Dict', 'from ...models.patch_ship_nav_json_body import PatchShipNavJsonBody', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='PatchShipNavResponse200', module_name='patch_ship_nav_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PatchShipNavResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav import ShipNav'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='PatchShipNavJsonBody', module_name='patch_ship_nav_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PatchShipNavJsonBody'}, required_properties=[], optional_properties=[EnumProperty(name='flightMode', required=False, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], relative_imports={'from typing import Union', 'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .patch_ship_nav import asyncio_detailed as patch_ship_nav_asyncio
from .patch_ship_nav import sync_detailed as patch_ship_nav

# Endpoint(path='/my/ships/{shipSymbol}/purchase', method='post', description="Purchase cargo from a market.\n\nThe ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.\n\nThe maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.\n\nPurchased goods are added to the ship's cargo hold.", name='purchase-cargo', requires_security=True, tag='fleet', summary='Purchase Cargo', relative_imports={'from ...models.purchase_cargo_purchase_cargo_201_response import PurchaseCargoPurchaseCargo201Response', 'from typing import Dict', 'from ...models.purchase_cargo_purchase_cargo_request import PurchaseCargoPurchaseCargoRequest', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='PurchaseCargoPurchaseCargo201Response', module_name='purchase_cargo_purchase_cargo_201_response'), data=Schema(title='Purchase Cargo 201 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo', 'transaction', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PurchaseCargoPurchaseCargo201Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='PurchaseCargoPurchaseCargo201ResponseData', module_name='purchase_cargo_purchase_cargo_201_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo', 'transaction', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PurchaseCargoPurchaseCargo201ResponseData', 'PurchaseCargoPurchaseCargo201Response'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='MarketTransaction', module_name='market_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'type', 'units', 'pricePerUnit', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PURCHASE', 'SELL'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'pricePerUnit': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price per unit of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction with a market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction with a market.', roots={'/components/schemas/MarketTransaction', 'MarketTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of transaction.', example=None, values={'PURCHASE': 'PURCHASE', 'SELL': 'SELL'}, class_info=Class(name='MarketTransactionType', module_name='market_transaction_type'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the transaction.', example=None), IntProperty(name='pricePerUnit', required=True, nullable=False, default=None, python_name='price_per_unit', description='The price per unit of the transaction.', example=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from ..models.market_transaction_type import MarketTransactionType', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.market_transaction import MarketTransaction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.purchase_cargo_purchase_cargo_201_response_data import PurchaseCargoPurchaseCargo201ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='PurchaseCargoPurchaseCargoRequest', module_name='purchase_cargo_purchase_cargo_request'), data=Schema(title='Purchase Cargo Request', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amounts of units to purchase.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PurchaseCargoPurchaseCargoRequest'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amounts of units to purchase.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .purchase_cargo import asyncio_detailed as purchase_cargo_asyncio
from .purchase_cargo import sync_detailed as purchase_cargo

# Endpoint(path='/my/ships', method='post', description="Purchase a ship from a Shipyard. In order to use this function, a ship under your agent's ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.\n\nShipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.", name='purchase-ship', requires_security=True, tag='fleet', summary='Purchase Ship', relative_imports={'from ...models.purchase_ship_response_201 import PurchaseShipResponse201', 'from typing import Dict', 'from ...models.purchase_ship_json_body import PurchaseShipJsonBody', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='PurchaseShipResponse201', module_name='purchase_ship_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['ship', 'agent', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'ship': Reference(ref='#/components/schemas/Ship'), 'transaction': Reference(ref='#/components/schemas/ShipyardTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PurchaseShipResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='PurchaseShipResponse201Data', module_name='purchase_ship_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['ship', 'agent', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'ship': Reference(ref='#/components/schemas/Ship'), 'transaction': Reference(ref='#/components/schemas/ShipyardTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PurchaseShipResponse201', 'PurchaseShipResponse201Data'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='ship', required=True, nullable=False, default=None, python_name='ship', example=None, class_info=Class(name='Ship', module_name='ship'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'registration', 'nav', 'crew', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'cargo', 'fuel', 'cooldown'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'registration': Reference(ref='#/components/schemas/ShipRegistration'), 'nav': Reference(ref='#/components/schemas/ShipNav'), 'crew': Reference(ref='#/components/schemas/ShipCrew'), 'frame': Reference(ref='#/components/schemas/ShipFrame'), 'reactor': Reference(ref='#/components/schemas/ShipReactor'), 'engine': Reference(ref='#/components/schemas/ShipEngine'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'modules': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipModule'), properties=None, additionalProperties=None, description='Modules installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='Mounts installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'fuel': Reference(ref='#/components/schemas/ShipFuel')}, additionalProperties=None, description='Ship details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship details.', roots={'/components/schemas/Ship', 'Ship'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', example=None, max_length=None, pattern=None), ModelProperty(name='registration', required=True, nullable=False, default=None, python_name='registration', example=None, class_info=Class(name='ShipRegistration', module_name='ship_registration'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'factionSymbol', 'role'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The agent's registered name of the ship", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction the ship is registered with', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'role': Reference(ref='#/components/schemas/ShipRole')}, additionalProperties=None, description='The public registration information of the ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The public registration information of the ship', roots={'/components/schemas/ShipRegistration', 'ShipRegistration'}, required_properties=[StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description="The agent's registered name of the ship", example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction the ship is registered with', example=None, max_length=None, pattern=None), EnumProperty(name='role', required=True, nullable=False, python_name='role', description='The registered role of the ship', example=None, values={'FABRICATOR': 'FABRICATOR', 'HARVESTER': 'HARVESTER', 'HAULER': 'HAULER', 'INTERCEPTOR': 'INTERCEPTOR', 'EXCAVATOR': 'EXCAVATOR', 'TRANSPORT': 'TRANSPORT', 'REPAIR': 'REPAIR', 'SURVEYOR': 'SURVEYOR', 'COMMAND': 'COMMAND', 'CARRIER': 'CARRIER', 'PATROL': 'PATROL', 'SATELLITE': 'SATELLITE', 'EXPLORER': 'EXPLORER', 'REFINERY': 'REFINERY'}, class_info=Class(name='ShipRole', module_name='ship_role'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_role import ShipRole'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast', 'import datetime'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from typing import Dict', 'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from ..models.ship_nav_status import ShipNavStatus', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='crew', required=True, nullable=False, default=None, python_name='crew', example=None, class_info=Class(name='ShipCrew', module_name='ship_crew'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'required', 'capacity', 'rotation', 'morale', 'wages'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The current number of crew members on the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The minimum number of crew members required to maintain the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum number of crew members the ship can support.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'rotation': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['STRICT', 'RELAXED'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", schema_format=None, default='STRICT', nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'morale': Schema(title=None, multipleOf=None, maximum=100.0, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'wages': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The ship's crew service and maintain the ship's systems and equipment.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The ship's crew service and maintain the ship's systems and equipment.", roots={'/components/schemas/ShipCrew', 'ShipCrew'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description='The current number of crew members on the ship.', example=None), IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description='The minimum number of crew members required to maintain the ship.', example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The maximum number of crew members the ship can support.', example=None), EnumProperty(name='rotation', required=True, nullable=False, python_name='rotation', description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", example=None, values={'STRICT': 'STRICT', 'RELAXED': 'RELAXED'}, class_info=Class(name='ShipCrewRotation', module_name='ship_crew_rotation'), value_type=<class 'str'>, default='ShipCrewRotation.STRICT'), IntProperty(name='morale', required=True, nullable=False, default=None, python_name='morale', description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", example=None), IntProperty(name='wages', required=True, nullable=False, default=None, python_name='wages', description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', example=None)], optional_properties=[], relative_imports={'from ..models.ship_crew_rotation import ShipCrewRotation'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='frame', required=True, nullable=False, default=None, python_name='frame', example=None, class_info=Class(name='ShipFrame', module_name='ship_frame'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'moduleSlots', 'mountingPoints', 'fuelCapacity', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'moduleSlots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mountingPoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fuelCapacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', roots={'/components/schemas/ShipFrame', 'ShipFrame'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the frame.', example=None, values={'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER'}, class_info=Class(name='ShipFrameSymbol', module_name='ship_frame_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the frame.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the frame.', example=None, max_length=None, pattern=None), IntProperty(name='moduleSlots', required=True, nullable=False, default=None, python_name='module_slots', description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', example=None), IntProperty(name='mountingPoints', required=True, nullable=False, default=None, python_name='mounting_points', description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', example=None), IntProperty(name='fuelCapacity', required=True, nullable=False, default=None, python_name='fuel_capacity', description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..models.ship_frame_symbol import ShipFrameSymbol', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='reactor', required=True, nullable=False, default=None, python_name='reactor', example=None, class_info=Class(name='ShipReactor', module_name='ship_reactor'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'powerOutput', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'powerOutput': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", roots={'/components/schemas/ShipReactor', 'ShipReactor'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the reactor.', example=None, values={'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I'}, class_info=Class(name='ShipReactorSymbol', module_name='ship_reactor_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the reactor.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the reactor.', example=None, max_length=None, pattern=None), IntProperty(name='powerOutput', required=True, nullable=False, default=None, python_name='power_output', description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_reactor_symbol import ShipReactorSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='engine', required=True, nullable=False, default=None, python_name='engine', example=None, class_info=Class(name='ShipEngine', module_name='ship_engine'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'speed', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'speed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The engine determines how quickly a ship travels between waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The engine determines how quickly a ship travels between waypoints.', roots={'/components/schemas/ShipEngine', 'ShipEngine'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the engine.', example=None, values={'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I'}, class_info=Class(name='ShipEngineSymbol', module_name='ship_engine_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the engine.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the engine.', example=None, max_length=None, pattern=None), IntProperty(name='speed', required=True, nullable=False, default=None, python_name='speed', description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict', 'from ..models.ship_engine_symbol import ShipEngineSymbol'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modules', required=True, nullable=False, default=None, python_name='modules', description='Modules installed in this ship.', example=None, inner_property=ModelProperty(name='modules_item', required=True, nullable=False, default=None, python_name='modules_item', example=None, class_info=Class(name='ShipModule', module_name='ship_module'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'range': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', roots={'ShipModule', '/components/schemas/ShipModule'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the module.', example=None, values={'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II'}, class_info=Class(name='ShipModuleSymbol', module_name='ship_module_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this module.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of this module.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='capacity', required=False, nullable=False, default=None, python_name='capacity', description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', example=None), IntProperty(name='range', required=False, nullable=False, default=None, python_name='range_', description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_module_symbol import ShipModuleSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description='Mounts installed in this ship.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo import ShipCargo', 'from ..models.cooldown import Cooldown', 'from ..models.ship_frame import ShipFrame', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_nav import ShipNav', 'from ..models.ship_registration import ShipRegistration', 'from ..models.ship_crew import ShipCrew', 'from ..models.ship_engine import ShipEngine', 'from ..models.ship_reactor import ShipReactor', 'from ..models.ship_fuel import ShipFuel', 'from ..models.ship_module import ShipModule'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='ShipyardTransaction', module_name='shipyard_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'shipType', 'price', 'agentSymbol', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that was the subject of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'shipType': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that was the subject of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'price': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the agent that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Results of a transaction with a shipyard.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Results of a transaction with a shipyard.', roots={'/components/schemas/ShipyardTransaction', 'ShipyardTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that was the subject of the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='shipType', required=True, nullable=False, default=None, python_name='ship_type', description='The symbol of the ship that was the subject of the transaction.', example=None, max_length=None, pattern=None), IntProperty(name='price', required=True, nullable=False, default=None, python_name='price', description='The price of the transaction.', example=None), StringProperty(name='agentSymbol', required=True, nullable=False, default=None, python_name='agent_symbol', description='The symbol of the agent that made the transaction.', example=None, max_length=None, pattern=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.ship import Ship', 'from ..models.shipyard_transaction import ShipyardTransaction'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.purchase_ship_response_201_data import PurchaseShipResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='PurchaseShipJsonBody', module_name='purchase_ship_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipType', 'waypointSymbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipType': Reference(ref='#/components/schemas/ShipType'), 'waypointSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint you want to purchase the ship at.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'PurchaseShipJsonBody'}, required_properties=[EnumProperty(name='shipType', required=True, nullable=False, python_name='ship_type', description='Type of ship', example=None, values={'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='ShipType', module_name='ship_type'), value_type=<class 'str'>, default=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint you want to purchase the ship at.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.ship_type import ShipType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers=set())
from .purchase_ship import asyncio_detailed as purchase_ship_asyncio
from .purchase_ship import sync_detailed as purchase_ship

# Endpoint(path='/my/ships/{shipSymbol}/refuel', method='post', description="Refuel your ship by buying fuel from the local market.\n\nRequires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.\n\nEach fuel bought from the market replenishes 100 units in your ship's fuel.\n\nShips will always be refuel to their frame's maximum fuel capacity when using this action.", name='refuel-ship', requires_security=True, tag='fleet', summary='Refuel Ship', relative_imports={'from ...models.refuel_ship_response_200 import RefuelShipResponse200', 'from ...models.refuel_ship_json_body import RefuelShipJsonBody', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='RefuelShipResponse200', module_name='refuel_ship_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agent', 'fuel', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'fuel': Reference(ref='#/components/schemas/ShipFuel'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RefuelShipResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='RefuelShipResponse200Data', module_name='refuel_ship_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agent', 'fuel', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'fuel': Reference(ref='#/components/schemas/ShipFuel'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RefuelShipResponse200Data', 'RefuelShipResponse200'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='MarketTransaction', module_name='market_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'type', 'units', 'pricePerUnit', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PURCHASE', 'SELL'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'pricePerUnit': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price per unit of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction with a market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction with a market.', roots={'/components/schemas/MarketTransaction', 'MarketTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of transaction.', example=None, values={'PURCHASE': 'PURCHASE', 'SELL': 'SELL'}, class_info=Class(name='MarketTransactionType', module_name='market_transaction_type'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the transaction.', example=None), IntProperty(name='pricePerUnit', required=True, nullable=False, default=None, python_name='price_per_unit', description='The price per unit of the transaction.', example=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from ..models.market_transaction_type import MarketTransactionType', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.market_transaction import MarketTransaction', 'from ..models.ship_fuel import ShipFuel'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.refuel_ship_response_200_data import RefuelShipResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='RefuelShipJsonBody', module_name='refuel_ship_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example='100', deprecated=None), 'fromCargo': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Wether to use the FUEL thats in your cargo or not. Default: false', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=False, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RefuelShipJsonBody'}, required_properties=[], optional_properties=[IntProperty(name='units', required=False, nullable=False, default=None, python_name='units', description="The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.", example='100'), BooleanProperty(name='fromCargo', required=False, nullable=False, default=None, python_name='from_cargo', description='Wether to use the FUEL thats in your cargo or not. Default: false', example=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .refuel_ship import asyncio_detailed as refuel_ship_asyncio
from .refuel_ship import sync_detailed as refuel_ship

# Endpoint(path='/my/ships/{shipSymbol}/mounts/remove', method='post', description='Remove a mount from a ship.\n\nThe ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.\n\nA removal fee will be deduced from the agent by the Shipyard.', name='remove-mount', requires_security=True, tag='fleet', summary='Remove Mount', relative_imports={'from ...models.remove_mount_remove_mount_201_response import RemoveMountRemoveMount201Response', 'from typing import Dict', 'from typing import cast', 'from ...models.remove_mount_remove_mount_request import RemoveMountRemoveMountRequest'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='RemoveMountRemoveMount201Response', module_name='remove_mount_remove_mount_201_response'), data=Schema(title='Remove Mount 201 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agent', 'mounts', 'cargo', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='List of installed mounts after the removal of the selected mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/ShipModificationTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RemoveMountRemoveMount201Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='RemoveMountRemoveMount201ResponseData', module_name='remove_mount_remove_mount_201_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agent', 'mounts', 'cargo', 'transaction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='List of installed mounts after the removal of the selected mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/ShipModificationTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RemoveMountRemoveMount201Response', 'RemoveMountRemoveMount201ResponseData'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description='List of installed mounts after the removal of the selected mount.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='ShipModificationTransaction', module_name='ship_modification_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint where the transaction took place.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction for a ship modification, such as installing a mount or a module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction for a ship modification, such as installing a mount or a module.', roots={'ShipModificationTransaction', '/components/schemas/ShipModificationTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint where the transaction took place.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_modification_transaction import ShipModificationTransaction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.remove_mount_remove_mount_201_response_data import RemoveMountRemoveMount201ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='RemoveMountRemoveMountRequest', module_name='remove_mount_remove_mount_request'), data=Schema(title='Remove Mount Request', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the mount to remove.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RemoveMountRemoveMountRequest'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the mount to remove.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .remove_mount import asyncio_detailed as remove_mount_asyncio
from .remove_mount import sync_detailed as remove_mount

# Endpoint(path='/my/ships/{shipSymbol}/sell', method='post', description='Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.', name='sell-cargo', requires_security=True, tag='fleet', summary='Sell Cargo', relative_imports={'from typing import Dict', 'from ...models.sell_cargo_sell_cargo_request import SellCargoSellCargoRequest', 'from ...models.sell_cargo_sell_cargo_201_response import SellCargoSellCargo201Response', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='SellCargoSellCargo201Response', module_name='sell_cargo_sell_cargo_201_response'), data=Schema(title='Sell Cargo 201 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo', 'transaction', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SellCargoSellCargo201Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='SellCargoSellCargo201ResponseData', module_name='sell_cargo_sell_cargo_201_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo', 'transaction', 'agent'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'transaction': Reference(ref='#/components/schemas/MarketTransaction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SellCargoSellCargo201ResponseData', 'SellCargoSellCargo201Response'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='transaction', required=True, nullable=False, default=None, python_name='transaction', example=None, class_info=Class(name='MarketTransaction', module_name='market_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'type', 'units', 'pricePerUnit', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PURCHASE', 'SELL'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'pricePerUnit': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price per unit of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction with a market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction with a market.', roots={'/components/schemas/MarketTransaction', 'MarketTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of transaction.', example=None, values={'PURCHASE': 'PURCHASE', 'SELL': 'SELL'}, class_info=Class(name='MarketTransactionType', module_name='market_transaction_type'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the transaction.', example=None), IntProperty(name='pricePerUnit', required=True, nullable=False, default=None, python_name='price_per_unit', description='The price per unit of the transaction.', example=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from ..models.market_transaction_type import MarketTransactionType', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.market_transaction import MarketTransaction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.sell_cargo_sell_cargo_201_response_data import SellCargoSellCargo201ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='SellCargoSellCargoRequest', module_name='sell_cargo_sell_cargo_request'), data=Schema(title='SellCargoRequest', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amounts of units to sell of the selected good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SellCargoSellCargoRequest'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amounts of units to sell of the selected good.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .sell_cargo import asyncio_detailed as sell_cargo_asyncio
from .sell_cargo import sync_detailed as sell_cargo

# Endpoint(path='/my/ships/{shipSymbol}/refine', method='post', description='Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.\n\nWhen refining, 30 basic goods will be converted into 10 processed goods.', name='ship-refine', requires_security=True, tag='fleet', summary='Ship Refine', relative_imports={'from ...models.ship_refine_json_body import ShipRefineJsonBody', 'from typing import Dict', 'from ...models.ship_refine_ship_refine_201_response import ShipRefineShipRefine201Response', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='ShipRefineShipRefine201Response', module_name='ship_refine_ship_refine_201_response'), data=Schema(title='Ship Refine 201 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo', 'cooldown', 'produced', 'consumed'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'produced': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Goods that were produced by this refining process.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Goods that were consumed during this refining process.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ShipRefineShipRefine201Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='ShipRefineShipRefine201ResponseData', module_name='ship_refine_ship_refine_201_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo', 'cooldown', 'produced', 'consumed'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'produced': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Goods that were produced by this refining process.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Goods that were consumed during this refining process.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ShipRefineShipRefine201ResponseData', 'ShipRefineShipRefine201Response'}, required_properties=[ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='produced', required=True, nullable=False, default=None, python_name='produced', description='Goods that were produced by this refining process.', example=None, inner_property=ModelProperty(name='produced_item', required=True, nullable=False, default=None, python_name='produced_item', example=None, class_info=Class(name='ShipRefineShipRefine201ResponseDataProducedItem', module_name='ship_refine_ship_refine_201_response_data_produced_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ShipRefineShipRefine201ResponseDataProducedItem', 'ShipRefineShipRefine201ResponseData', 'ShipRefineShipRefine201Response'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='Symbol of the good.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amount of units of the good.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='consumed', required=True, nullable=False, default=None, python_name='consumed', description='Goods that were consumed during this refining process.', example=None, inner_property=ModelProperty(name='consumed_item', required=True, nullable=False, default=None, python_name='consumed_item', example=None, class_info=Class(name='ShipRefineShipRefine201ResponseDataConsumedItem', module_name='ship_refine_ship_refine_201_response_data_consumed_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ShipRefineShipRefine201ResponseDataConsumedItem', 'ShipRefineShipRefine201ResponseData', 'ShipRefineShipRefine201Response'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='Symbol of the good.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amount of units of the good.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_refine_ship_refine_201_response_data_produced_item import ShipRefineShipRefine201ResponseDataProducedItem', 'from ..models.ship_refine_ship_refine_201_response_data_consumed_item import ShipRefineShipRefine201ResponseDataConsumedItem', 'from ..models.cooldown import Cooldown', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_refine_ship_refine_201_response_data import ShipRefineShipRefine201ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='ShipRefineJsonBody', module_name='ship_refine_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['produce'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'produce': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['IRON', 'COPPER', 'SILVER', 'GOLD', 'ALUMINUM', 'PLATINUM', 'URANITE', 'MERITIUM', 'FUEL'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of good to produce out of the refining process.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ShipRefineJsonBody'}, required_properties=[EnumProperty(name='produce', required=True, nullable=False, python_name='produce', description='The type of good to produce out of the refining process.', example=None, values={'IRON': 'IRON', 'COPPER': 'COPPER', 'SILVER': 'SILVER', 'GOLD': 'GOLD', 'ALUMINUM': 'ALUMINUM', 'PLATINUM': 'PLATINUM', 'URANITE': 'URANITE', 'MERITIUM': 'MERITIUM', 'FUEL': 'FUEL'}, class_info=Class(name='ShipRefineJsonBodyProduce', module_name='ship_refine_json_body_produce'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_refine_json_body_produce import ShipRefineJsonBodyProduce'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .ship_refine import asyncio_detailed as ship_refine_asyncio
from .ship_refine import sync_detailed as ship_refine

# Endpoint(path='/my/ships/{shipSymbol}/siphon', method='post', description='Siphon gases, such as hydrocarbon, from gas giants.\n\nThe ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.', name='siphon-resources', requires_security=True, tag='fleet', summary='Siphon Resources', relative_imports={'from typing import Dict', 'from ...models.siphon_resources_response_201 import SiphonResourcesResponse201', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='SiphonResourcesResponse201', module_name='siphon_resources_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['siphon', 'cooldown', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'siphon': Reference(ref='#/components/schemas/Siphon'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SiphonResourcesResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='SiphonResourcesResponse201Data', module_name='siphon_resources_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['siphon', 'cooldown', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'siphon': Reference(ref='#/components/schemas/Siphon'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SiphonResourcesResponse201Data', 'SiphonResourcesResponse201'}, required_properties=[ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='siphon', required=True, nullable=False, default=None, python_name='siphon', example=None, class_info=Class(name='Siphon', module_name='siphon'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'yield'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the ship that executed the siphon.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'yield': Reference(ref='#/components/schemas/SiphonYield')}, additionalProperties=None, description='Siphon details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Siphon details.', roots={'/components/schemas/Siphon', 'Siphon'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='Symbol of the ship that executed the siphon.', example=None, max_length=None, pattern=None), ModelProperty(name='yield', required=True, nullable=False, default=None, python_name='yield_', example=None, class_info=Class(name='SiphonYield', module_name='siphon_yield'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The number of units siphoned that were placed into the ship's cargo hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A yield from the siphon operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A yield from the siphon operation.', roots={'/components/schemas/SiphonYield', 'SiphonYield'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description="The number of units siphoned that were placed into the ship's cargo hold.", example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.siphon_yield import SiphonYield'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.cooldown import Cooldown', 'from ..models.siphon import Siphon', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.siphon_resources_response_201_data import SiphonResourcesResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .siphon_resources import asyncio_detailed as siphon_resources_asyncio
from .siphon_resources import sync_detailed as siphon_resources

# Endpoint(path='/my/ships/{shipSymbol}/transfer', method='post', description="Transfer cargo between ships.\n\nThe receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.\n\nThe response body's cargo shows the cargo of the transferring ship after the transfer is complete.", name='transfer-cargo', requires_security=True, tag='fleet', summary='Transfer Cargo', relative_imports={'from ...models.transfer_cargo_transfer_cargo_200_response import TransferCargoTransferCargo200Response', 'from typing import Dict', 'from typing import cast', 'from ...models.transfer_cargo_transfer_cargo_request import TransferCargoTransferCargoRequest'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='TransferCargoTransferCargo200Response', module_name='transfer_cargo_transfer_cargo_200_response'), data=Schema(title='Transfer Cargo 200 Response', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'TransferCargoTransferCargo200Response'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='TransferCargoTransferCargo200ResponseData', module_name='transfer_cargo_transfer_cargo_200_response_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'TransferCargoTransferCargo200ResponseData', 'TransferCargoTransferCargo200Response'}, required_properties=[ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.transfer_cargo_transfer_cargo_200_response_data import TransferCargoTransferCargo200ResponseData'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='TransferCargoTransferCargoRequest', module_name='transfer_cargo_transfer_cargo_request'), data=Schema(title='Transfer Cargo Request', multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'units', 'shipSymbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Reference(ref='#/components/schemas/TradeSymbol'), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units to transfer.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship to transfer to.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'TransferCargoTransferCargoRequest'}, required_properties=[EnumProperty(name='tradeSymbol', required=True, nullable=False, python_name='trade_symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amount of units to transfer.', example=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship to transfer to.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .transfer_cargo import asyncio_detailed as transfer_cargo_asyncio
from .transfer_cargo import sync_detailed as transfer_cargo

# Endpoint(path='/my/ships/{shipSymbol}/warp', method='post', description="Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship's manifest.\n\nThe returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.", name='warp-ship', requires_security=True, tag='fleet', summary='Warp Ship', relative_imports={'from ...models.warp_ship_response_200 import WarpShipResponse200', 'from typing import Dict', 'from ...models.warp_ship_json_body import WarpShipJsonBody', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('shipSymbol', StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='WarpShipResponse200', module_name='warp_ship_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav', 'fuel'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'fuel': Reference(ref='#/components/schemas/ShipFuel'), 'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WarpShipResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='WarpShipResponse200Data', module_name='warp_ship_response_200_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['nav', 'fuel'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'fuel': Reference(ref='#/components/schemas/ShipFuel'), 'nav': Reference(ref='#/components/schemas/ShipNav')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WarpShipResponse200', 'WarpShipResponse200Data'}, required_properties=[ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from typing import Dict', 'from typing import cast', 'from ..models.ship_nav_status import ShipNavStatus'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav import ShipNav', 'from ..models.ship_fuel import ShipFuel'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.warp_ship_response_200_data import WarpShipResponse200Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='WarpShipJsonBody', module_name='warp_ship_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The target destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WarpShipJsonBody'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The target destination.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'ship_symbol'})
from .warp_ship import asyncio_detailed as warp_ship_asyncio
from .warp_ship import sync_detailed as warp_ship

__all__ = (
    "get_my_ships",
    "get_my_ships_asyncio",
    "purchase_ship",
    "purchase_ship_asyncio",
    "get_my_ship",
    "get_my_ship_asyncio",
    "get_my_ship_cargo",
    "get_my_ship_cargo_asyncio",
    "orbit_ship",
    "orbit_ship_asyncio",
    "ship_refine",
    "ship_refine_asyncio",
    "create_chart",
    "create_chart_asyncio",
    "get_ship_cooldown",
    "get_ship_cooldown_asyncio",
    "dock_ship",
    "dock_ship_asyncio",
    "create_survey",
    "create_survey_asyncio",
    "extract_resources",
    "extract_resources_asyncio",
    "siphon_resources",
    "siphon_resources_asyncio",
    "extract_resources_with_survey",
    "extract_resources_with_survey_asyncio",
    "jettison",
    "jettison_asyncio",
    "jump_ship",
    "jump_ship_asyncio",
    "navigate_ship",
    "navigate_ship_asyncio",
    "get_ship_nav",
    "get_ship_nav_asyncio",
    "patch_ship_nav",
    "patch_ship_nav_asyncio",
    "warp_ship",
    "warp_ship_asyncio",
    "sell_cargo",
    "sell_cargo_asyncio",
    "create_ship_system_scan",
    "create_ship_system_scan_asyncio",
    "create_ship_waypoint_scan",
    "create_ship_waypoint_scan_asyncio",
    "create_ship_ship_scan",
    "create_ship_ship_scan_asyncio",
    "refuel_ship",
    "refuel_ship_asyncio",
    "purchase_cargo",
    "purchase_cargo_asyncio",
    "transfer_cargo",
    "transfer_cargo_asyncio",
    "negotiateContract",
    "negotiateContract_asyncio",
    "get_mounts",
    "get_mounts_asyncio",
    "install_mount",
    "install_mount_asyncio",
    "remove_mount",
    "remove_mount_asyncio",
)
