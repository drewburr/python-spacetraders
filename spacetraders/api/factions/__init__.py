""" Contains methods for accessing the API """

# Endpoint(path='/factions', method='get', description='Return a paginated list of all the factions in the game.', name='get-factions', requires_security=True, tag='factions', summary='List Factions', relative_imports={'from ...models.get_factions_response_200 import GetFactionsResponse200', 'from typing import Optional', 'from typing import Union', 'from ...types import UNSET, Unset', 'from typing import cast', 'from typing import Dict'}, query_parameters={'page': IntProperty(name='page', required=False, nullable=True, default=1, python_name='page', description=None, example=None), 'limit': IntProperty(name='limit', required=False, nullable=True, default=10, python_name='limit', description=None, example=None)}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetFactionsResponse200', module_name='get_factions_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data', 'meta'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/Faction'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'meta': Reference(ref='#/components/schemas/Meta')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetFactionsResponse200'}, required_properties=[ListProperty(name='data', required=True, nullable=False, default=None, python_name='data', description=None, example=None, inner_property=ModelProperty(name='data_item', required=True, nullable=False, default=None, python_name='data_item', example=None, class_info=Class(name='Faction', module_name='faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'headquarters', 'traits', 'isRecruiting'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The waypoint in which the faction's HQ is located in.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/FactionTrait'), properties=None, additionalProperties=None, description='List of traits that define this faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'isRecruiting': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether or not the faction is currently recruiting new agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Faction details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Faction details.', roots={'Faction', '/components/schemas/Faction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the faction.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the faction.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description="The waypoint in which the faction's HQ is located in.", example=None, max_length=None, pattern=None), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='List of traits that define this faction.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='FactionTrait', module_name='faction_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/FactionTrait', 'FactionTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'BUREAUCRATIC': 'BUREAUCRATIC', 'SECRETIVE': 'SECRETIVE', 'CAPITALISTIC': 'CAPITALISTIC', 'INDUSTRIOUS': 'INDUSTRIOUS', 'PEACEFUL': 'PEACEFUL', 'DISTRUSTFUL': 'DISTRUSTFUL', 'WELCOMING': 'WELCOMING', 'SMUGGLERS': 'SMUGGLERS', 'SCAVENGERS': 'SCAVENGERS', 'REBELLIOUS': 'REBELLIOUS', 'EXILES': 'EXILES', 'PIRATES': 'PIRATES', 'RAIDERS': 'RAIDERS', 'CLAN': 'CLAN', 'GUILD': 'GUILD', 'DOMINION': 'DOMINION', 'FRINGE': 'FRINGE', 'FORSAKEN': 'FORSAKEN', 'ISOLATED': 'ISOLATED', 'LOCALIZED': 'LOCALIZED', 'ESTABLISHED': 'ESTABLISHED', 'NOTABLE': 'NOTABLE', 'DOMINANT': 'DOMINANT', 'INESCAPABLE': 'INESCAPABLE', 'INNOVATIVE': 'INNOVATIVE', 'BOLD': 'BOLD', 'VISIONARY': 'VISIONARY', 'CURIOUS': 'CURIOUS', 'DARING': 'DARING', 'EXPLORATORY': 'EXPLORATORY', 'RESOURCEFUL': 'RESOURCEFUL', 'FLEXIBLE': 'FLEXIBLE', 'COOPERATIVE': 'COOPERATIVE', 'UNITED': 'UNITED', 'STRATEGIC': 'STRATEGIC', 'INTELLIGENT': 'INTELLIGENT', 'RESEARCH_FOCUSED': 'RESEARCH_FOCUSED', 'COLLABORATIVE': 'COLLABORATIVE', 'PROGRESSIVE': 'PROGRESSIVE', 'MILITARISTIC': 'MILITARISTIC', 'TECHNOLOGICALLY_ADVANCED': 'TECHNOLOGICALLY_ADVANCED', 'AGGRESSIVE': 'AGGRESSIVE', 'IMPERIALISTIC': 'IMPERIALISTIC', 'TREASURE_HUNTERS': 'TREASURE_HUNTERS', 'DEXTEROUS': 'DEXTEROUS', 'UNPREDICTABLE': 'UNPREDICTABLE', 'BRUTAL': 'BRUTAL', 'FLEETING': 'FLEETING', 'ADAPTABLE': 'ADAPTABLE', 'SELF_SUFFICIENT': 'SELF_SUFFICIENT', 'DEFENSIVE': 'DEFENSIVE', 'PROUD': 'PROUD', 'DIVERSE': 'DIVERSE', 'INDEPENDENT': 'INDEPENDENT', 'SELF_INTERESTED': 'SELF_INTERESTED', 'FRAGMENTED': 'FRAGMENTED', 'COMMERCIAL': 'COMMERCIAL', 'FREE_MARKETS': 'FREE_MARKETS', 'ENTREPRENEURIAL': 'ENTREPRENEURIAL'}, class_info=Class(name='FactionTraitSymbol', module_name='faction_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.faction_trait_symbol import FactionTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isRecruiting', required=True, nullable=False, default=None, python_name='is_recruiting', description='Whether or not the faction is currently recruiting new agents.', example=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol', 'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.faction_trait import FactionTrait'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='meta', required=True, nullable=False, default=None, python_name='meta', example=None, class_info=Class(name='Meta', module_name='meta'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['total', 'page', 'limit'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'total': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Shows the total amount of items of this kind that exist.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'page': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', schema_format=None, default=1, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'limit': Schema(title=None, multipleOf=None, maximum=20.0, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of items in each page. Limits how many items can be fetched at once.', schema_format=None, default=10, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Meta details for pagination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None, x-examples={'example-1': {'total': 6, 'page': 1, 'limit': 20}}), description='Meta details for pagination.', roots={'Meta', '/components/schemas/Meta'}, required_properties=[IntProperty(name='total', required=True, nullable=False, default=None, python_name='total', description='Shows the total amount of items of this kind that exist.', example=None), IntProperty(name='page', required=True, nullable=False, default=1, python_name='page', description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', example=None), IntProperty(name='limit', required=True, nullable=False, default=10, python_name='limit', description='The amount of items in each page. Limits how many items can be fetched at once.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.faction import Faction', 'from ..models.meta import Meta'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'page', 'limit'})
# Endpoint(path='/factions/{factionSymbol}', method='get', description='View the details of a faction.', name='get-faction', requires_security=False, tag='factions', summary='Get Faction', relative_imports={'from ...models.get_faction_response_200 import GetFactionResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('factionSymbol', StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description=None, example='COSMIC', max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetFactionResponse200', module_name='get_faction_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Faction')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetFactionResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Faction', module_name='faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'headquarters', 'traits', 'isRecruiting'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The waypoint in which the faction's HQ is located in.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/FactionTrait'), properties=None, additionalProperties=None, description='List of traits that define this faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'isRecruiting': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether or not the faction is currently recruiting new agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Faction details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Faction details.', roots={'Faction', '/components/schemas/Faction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the faction.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the faction.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description="The waypoint in which the faction's HQ is located in.", example=None, max_length=None, pattern=None), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='List of traits that define this faction.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='FactionTrait', module_name='faction_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/FactionTrait', 'FactionTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'BUREAUCRATIC': 'BUREAUCRATIC', 'SECRETIVE': 'SECRETIVE', 'CAPITALISTIC': 'CAPITALISTIC', 'INDUSTRIOUS': 'INDUSTRIOUS', 'PEACEFUL': 'PEACEFUL', 'DISTRUSTFUL': 'DISTRUSTFUL', 'WELCOMING': 'WELCOMING', 'SMUGGLERS': 'SMUGGLERS', 'SCAVENGERS': 'SCAVENGERS', 'REBELLIOUS': 'REBELLIOUS', 'EXILES': 'EXILES', 'PIRATES': 'PIRATES', 'RAIDERS': 'RAIDERS', 'CLAN': 'CLAN', 'GUILD': 'GUILD', 'DOMINION': 'DOMINION', 'FRINGE': 'FRINGE', 'FORSAKEN': 'FORSAKEN', 'ISOLATED': 'ISOLATED', 'LOCALIZED': 'LOCALIZED', 'ESTABLISHED': 'ESTABLISHED', 'NOTABLE': 'NOTABLE', 'DOMINANT': 'DOMINANT', 'INESCAPABLE': 'INESCAPABLE', 'INNOVATIVE': 'INNOVATIVE', 'BOLD': 'BOLD', 'VISIONARY': 'VISIONARY', 'CURIOUS': 'CURIOUS', 'DARING': 'DARING', 'EXPLORATORY': 'EXPLORATORY', 'RESOURCEFUL': 'RESOURCEFUL', 'FLEXIBLE': 'FLEXIBLE', 'COOPERATIVE': 'COOPERATIVE', 'UNITED': 'UNITED', 'STRATEGIC': 'STRATEGIC', 'INTELLIGENT': 'INTELLIGENT', 'RESEARCH_FOCUSED': 'RESEARCH_FOCUSED', 'COLLABORATIVE': 'COLLABORATIVE', 'PROGRESSIVE': 'PROGRESSIVE', 'MILITARISTIC': 'MILITARISTIC', 'TECHNOLOGICALLY_ADVANCED': 'TECHNOLOGICALLY_ADVANCED', 'AGGRESSIVE': 'AGGRESSIVE', 'IMPERIALISTIC': 'IMPERIALISTIC', 'TREASURE_HUNTERS': 'TREASURE_HUNTERS', 'DEXTEROUS': 'DEXTEROUS', 'UNPREDICTABLE': 'UNPREDICTABLE', 'BRUTAL': 'BRUTAL', 'FLEETING': 'FLEETING', 'ADAPTABLE': 'ADAPTABLE', 'SELF_SUFFICIENT': 'SELF_SUFFICIENT', 'DEFENSIVE': 'DEFENSIVE', 'PROUD': 'PROUD', 'DIVERSE': 'DIVERSE', 'INDEPENDENT': 'INDEPENDENT', 'SELF_INTERESTED': 'SELF_INTERESTED', 'FRAGMENTED': 'FRAGMENTED', 'COMMERCIAL': 'COMMERCIAL', 'FREE_MARKETS': 'FREE_MARKETS', 'ENTREPRENEURIAL': 'ENTREPRENEURIAL'}, class_info=Class(name='FactionTraitSymbol', module_name='faction_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.faction_trait_symbol import FactionTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isRecruiting', required=True, nullable=False, default=None, python_name='is_recruiting', description='Whether or not the faction is currently recruiting new agents.', example=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol', 'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.faction_trait import FactionTrait'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.faction import Faction'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'faction_symbol'})
from .get_faction import asyncio_detailed as get_faction_asyncio
from .get_faction import sync_detailed as get_faction
from .get_factions import asyncio_detailed as get_factions_asyncio
from .get_factions import sync_detailed as get_factions

__all__ = (
    "get_factions",
    "get_factions_asyncio",
    "get_faction",
    "get_faction_asyncio",
)
