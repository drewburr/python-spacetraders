""" Contains methods for accessing the API """

# Endpoint(path='/', method='get', description='Return the status of the game server.\nThis also includes a few global elements, such as announcements, server reset dates and leaderboards.', name='get-status', requires_security=True, tag='default', summary='Get Status', relative_imports={'from ...models.get_status_response_200 import GetStatusResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetStatusResponse200', module_name='get_status_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['status', 'version', 'resetDate', 'description', 'stats', 'leaderboards', 'serverResets', 'announcements', 'links'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'status': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The current status of the game server.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'version': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The current version of the API.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'resetDate': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date when the game server was last reset.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'stats': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agents', 'ships', 'systems', 'waypoints'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agents': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Number of registered agents in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'ships': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Total number of ships in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'systems': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Total number of systems in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'waypoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Total number of waypoints in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'leaderboards': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['mostCredits', 'mostSubmittedCharts'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'mostCredits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agentSymbol', 'credits'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of credits.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Top agents with the most credits.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mostSubmittedCharts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agentSymbol', 'chartCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chartCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of charts done by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Top agents with the most charted submitted.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'serverResets': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['next', 'frequency'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'next': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the game server will reset.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'frequency': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How often we intend to reset the game server.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'announcements': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['title', 'body'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'title': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'body': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'links': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'url'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'url': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200'}, required_properties=[StringProperty(name='status', required=True, nullable=False, default=None, python_name='status', description='The current status of the game server.', example=None, max_length=None, pattern=None), StringProperty(name='version', required=True, nullable=False, default=None, python_name='version', description='The current version of the API.', example=None, max_length=None, pattern=None), StringProperty(name='resetDate', required=True, nullable=False, default=None, python_name='reset_date', description='The date when the game server was last reset.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description=None, example=None, max_length=None, pattern=None), ModelProperty(name='stats', required=True, nullable=False, default=None, python_name='stats', example=None, class_info=Class(name='GetStatusResponse200Stats', module_name='get_status_response_200_stats'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agents', 'ships', 'systems', 'waypoints'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agents': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Number of registered agents in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'ships': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Total number of ships in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'systems': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Total number of systems in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'waypoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Total number of waypoints in the game.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200', 'GetStatusResponse200Stats'}, required_properties=[IntProperty(name='agents', required=True, nullable=False, default=None, python_name='agents', description='Number of registered agents in the game.', example=None), IntProperty(name='ships', required=True, nullable=False, default=None, python_name='ships', description='Total number of ships in the game.', example=None), IntProperty(name='systems', required=True, nullable=False, default=None, python_name='systems', description='Total number of systems in the game.', example=None), IntProperty(name='waypoints', required=True, nullable=False, default=None, python_name='waypoints', description='Total number of waypoints in the game.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='leaderboards', required=True, nullable=False, default=None, python_name='leaderboards', example=None, class_info=Class(name='GetStatusResponse200Leaderboards', module_name='get_status_response_200_leaderboards'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['mostCredits', 'mostSubmittedCharts'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'mostCredits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agentSymbol', 'credits'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of credits.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Top agents with the most credits.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mostSubmittedCharts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agentSymbol', 'chartCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chartCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of charts done by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Top agents with the most charted submitted.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200Leaderboards', 'GetStatusResponse200'}, required_properties=[ListProperty(name='mostCredits', required=True, nullable=False, default=None, python_name='most_credits', description='Top agents with the most credits.', example=None, inner_property=ModelProperty(name='mostCredits_item', required=True, nullable=False, default=None, python_name='most_credits_item', example=None, class_info=Class(name='GetStatusResponse200LeaderboardsMostCreditsItem', module_name='get_status_response_200_leaderboards_most_credits_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agentSymbol', 'credits'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of credits.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200Leaderboards', 'GetStatusResponse200LeaderboardsMostCreditsItem', 'GetStatusResponse200'}, required_properties=[StringProperty(name='agentSymbol', required=True, nullable=False, default=None, python_name='agent_symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='Amount of credits.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='mostSubmittedCharts', required=True, nullable=False, default=None, python_name='most_submitted_charts', description='Top agents with the most charted submitted.', example=None, inner_property=ModelProperty(name='mostSubmittedCharts_item', required=True, nullable=False, default=None, python_name='most_submitted_charts_item', example=None, class_info=Class(name='GetStatusResponse200LeaderboardsMostSubmittedChartsItem', module_name='get_status_response_200_leaderboards_most_submitted_charts_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['agentSymbol', 'chartCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chartCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of charts done by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200Leaderboards', 'GetStatusResponse200LeaderboardsMostSubmittedChartsItem', 'GetStatusResponse200'}, required_properties=[StringProperty(name='agentSymbol', required=True, nullable=False, default=None, python_name='agent_symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='chartCount', required=True, nullable=False, default=None, python_name='chart_count', description='Amount of charts done by the agent.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.get_status_response_200_leaderboards_most_credits_item import GetStatusResponse200LeaderboardsMostCreditsItem', 'from ..models.get_status_response_200_leaderboards_most_submitted_charts_item import GetStatusResponse200LeaderboardsMostSubmittedChartsItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='serverResets', required=True, nullable=False, default=None, python_name='server_resets', example=None, class_info=Class(name='GetStatusResponse200ServerResets', module_name='get_status_response_200_server_resets'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['next', 'frequency'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'next': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the game server will reset.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'frequency': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How often we intend to reset the game server.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200', 'GetStatusResponse200ServerResets'}, required_properties=[StringProperty(name='next', required=True, nullable=False, default=None, python_name='next_', description='The date and time when the game server will reset.', example=None, max_length=None, pattern=None), StringProperty(name='frequency', required=True, nullable=False, default=None, python_name='frequency', description='How often we intend to reset the game server.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='announcements', required=True, nullable=False, default=None, python_name='announcements', description=None, example=None, inner_property=ModelProperty(name='announcements_item', required=True, nullable=False, default=None, python_name='announcements_item', example=None, class_info=Class(name='GetStatusResponse200AnnouncementsItem', module_name='get_status_response_200_announcements_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['title', 'body'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'title': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'body': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200AnnouncementsItem', 'GetStatusResponse200'}, required_properties=[StringProperty(name='title', required=True, nullable=False, default=None, python_name='title', description=None, example=None, max_length=None, pattern=None), StringProperty(name='body', required=True, nullable=False, default=None, python_name='body', description=None, example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='links', required=True, nullable=False, default=None, python_name='links', description=None, example=None, inner_property=ModelProperty(name='links_item', required=True, nullable=False, default=None, python_name='links_item', example=None, class_info=Class(name='GetStatusResponse200LinksItem', module_name='get_status_response_200_links_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'url'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'url': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetStatusResponse200LinksItem', 'GetStatusResponse200'}, required_properties=[StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description=None, example=None, max_length=None, pattern=None), StringProperty(name='url', required=True, nullable=False, default=None, python_name='url', description=None, example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.get_status_response_200_announcements_item import GetStatusResponse200AnnouncementsItem', 'from ..models.get_status_response_200_links_item import GetStatusResponse200LinksItem', 'from ..models.get_status_response_200_leaderboards import GetStatusResponse200Leaderboards', 'from ..models.get_status_response_200_stats import GetStatusResponse200Stats', 'from ..models.get_status_response_200_server_resets import GetStatusResponse200ServerResets'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers=set())
from .get_status import asyncio_detailed as get_status_asyncio
from .get_status import sync_detailed as get_status

# Endpoint(path='/register', method='post', description='Creates a new agent and ties it to an account. \nThe agent symbol must consist of a 3-14 character string, and will be used to represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.\n\nThis new agent will be tied to a starting faction of your choice, which determines your starting location, and will be granted an authorization token, a contract with their starting faction, a command ship that can fly across space with advanced capabilities, a small probe ship that can be used for reconnaissance, and 150,000 credits.\n\n> #### Keep your token safe and secure\n>\n> Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.\n\nIf you are new to SpaceTraders, It is recommended to register with the COSMIC faction, a faction that is well connected to the rest of the universe. After registering, you should try our interactive [quickstart guide](https://docs.spacetraders.io/quickstart/new-game) which will walk you through basic API requests in just a few minutes.', name='register', requires_security=False, tag='default', summary='Register New Agent', relative_imports={'from ...models.register_response_201 import RegisterResponse201', 'from ...models.register_json_body import RegisterJsonBody', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='RegisterResponse201', module_name='register_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['token', 'agent', 'faction', 'contract', 'ship'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'contract': Reference(ref='#/components/schemas/Contract'), 'faction': Reference(ref='#/components/schemas/Faction'), 'ship': Reference(ref='#/components/schemas/Ship'), 'token': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A Bearer token for accessing secured API endpoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RegisterResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='RegisterResponse201Data', module_name='register_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['token', 'agent', 'faction', 'contract', 'ship'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'agent': Reference(ref='#/components/schemas/Agent'), 'contract': Reference(ref='#/components/schemas/Contract'), 'faction': Reference(ref='#/components/schemas/Faction'), 'ship': Reference(ref='#/components/schemas/Ship'), 'token': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A Bearer token for accessing secured API endpoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RegisterResponse201Data', 'RegisterResponse201'}, required_properties=[ModelProperty(name='agent', required=True, nullable=False, default=None, python_name='agent', example=None, class_info=Class(name='Agent', module_name='agent'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'accountId': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Account ID that is tied to this agent. Only included on your own agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The headquarters of the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'credits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', schema_format='int64', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'startingFaction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The faction the agent started with.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipCount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='How many ships are owned by the agent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Agent details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Agent details.', roots={'/components/schemas/Agent', 'Agent'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Symbol of the agent.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description='The headquarters of the agent.', example=None, max_length=None, pattern=None), IntProperty(name='credits', required=True, nullable=False, default=None, python_name='credits_', description='The number of credits the agent has available. Credits can be negative if funds have been overdrawn.', example=None), StringProperty(name='startingFaction', required=True, nullable=False, default=None, python_name='starting_faction', description='The faction the agent started with.', example=None, max_length=None, pattern=None), IntProperty(name='shipCount', required=True, nullable=False, default=None, python_name='ship_count', description='How many ships are owned by the agent.', example=None)], optional_properties=[StringProperty(name='accountId', required=False, nullable=False, default=None, python_name='account_id', description='Account ID that is tied to this agent. Only included on your own agent.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='contract', required=True, nullable=False, default=None, python_name='contract', example=None, class_info=Class(name='Contract', module_name='contract'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'id': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='ID of the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction that this contract is for.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Type of contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'terms': Reference(ref='#/components/schemas/ContractTerms'), 'accepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been accepted by the agent', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the contract has been fulfilled', schema_format=None, default=False, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Deprecated in favor of deadlineToAccept', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'deadlineToAccept': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the contract is no longer available to be accepted', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Contract details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Contract details.', roots={'Contract', '/components/schemas/Contract'}, required_properties=[StringProperty(name='id', required=True, nullable=False, default=None, python_name='id', description='ID of the contract.', example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction that this contract is for.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of contract.', example=None, values={'PROCUREMENT': 'PROCUREMENT', 'TRANSPORT': 'TRANSPORT', 'SHUTTLE': 'SHUTTLE'}, class_info=Class(name='ContractType', module_name='contract_type'), value_type=<class 'str'>, default=None), ModelProperty(name='terms', required=True, nullable=False, default=None, python_name='terms', example=None, class_info=Class(name='ContractTerms', module_name='contract_terms'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['deadline', 'payment'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'deadline': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The deadline for the contract.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'payment': Reference(ref='#/components/schemas/ContractPayment'), 'deliver': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ContractDeliverGood'), properties=None, additionalProperties=None, description='The cargo that needs to be delivered to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The terms to fulfill the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The terms to fulfill the contract.', roots={'/components/schemas/ContractTerms', 'ContractTerms'}, required_properties=[DateTimeProperty(name='deadline', required=True, nullable=False, default=None, python_name='deadline', description='The deadline for the contract.', example=None), ModelProperty(name='payment', required=True, nullable=False, default=None, python_name='payment', example=None, class_info=Class(name='ContractPayment', module_name='contract_payment'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['onAccepted', 'onFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'onAccepted': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received up front for accepting the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'onFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits received when the contract is fulfilled.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Payments for the contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Payments for the contract.', roots={'ContractPayment', '/components/schemas/ContractPayment'}, required_properties=[IntProperty(name='onAccepted', required=True, nullable=False, default=None, python_name='on_accepted', description='The amount of credits received up front for accepting the contract.', example=None), IntProperty(name='onFulfilled', required=True, nullable=False, default=None, python_name='on_fulfilled', description='The amount of credits received when the contract is fulfilled.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[ListProperty(name='deliver', required=False, nullable=False, default=None, python_name='deliver', description='The cargo that needs to be delivered to fulfill the contract.', example=None, inner_property=ModelProperty(name='deliver_item', required=True, nullable=False, default=None, python_name='deliver_item', example=None, class_info=Class(name='ContractDeliverGood', module_name='contract_deliver_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good to deliver.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'destinationSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The destination where goods need to be delivered.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsRequired': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units that need to be delivered on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'unitsFulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled on this contract.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of a delivery contract. Includes the type of good, units needed, and the destination.', roots={'/components/schemas/ContractDeliverGood', 'ContractDeliverGood'}, required_properties=[StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good to deliver.', example=None, max_length=None, pattern=None), StringProperty(name='destinationSymbol', required=True, nullable=False, default=None, python_name='destination_symbol', description='The destination where goods need to be delivered.', example=None, max_length=None, pattern=None), IntProperty(name='unitsRequired', required=True, nullable=False, default=None, python_name='units_required', description='The number of units that need to be delivered on this contract.', example=None), IntProperty(name='unitsFulfilled', required=True, nullable=False, default=None, python_name='units_fulfilled', description='The number of units fulfilled on this contract.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'from typing import Dict', 'import datetime'}, lazy_imports={'from ..models.contract_deliver_good import ContractDeliverGood', 'from ..models.contract_payment import ContractPayment'}, additional_properties=True, is_multipart_body=False), BooleanProperty(name='accepted', required=True, nullable=False, default=False, python_name='accepted', description='Whether the contract has been accepted by the agent', example=None), BooleanProperty(name='fulfilled', required=True, nullable=False, default=False, python_name='fulfilled', description='Whether the contract has been fulfilled', example=None), DateTimeProperty(name='expiration', required=True, nullable=False, default=None, python_name='expiration', description='Deprecated in favor of deadlineToAccept', example=None)], optional_properties=[DateTimeProperty(name='deadlineToAccept', required=False, nullable=False, default=None, python_name='deadline_to_accept', description='The time at which the contract is no longer available to be accepted', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.contract_type import ContractType', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.contract_terms import ContractTerms'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='faction', required=True, nullable=False, default=None, python_name='faction', example=None, class_info=Class(name='Faction', module_name='faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'headquarters', 'traits', 'isRecruiting'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'headquarters': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The waypoint in which the faction's HQ is located in.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/FactionTrait'), properties=None, additionalProperties=None, description='List of traits that define this faction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'isRecruiting': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether or not the faction is currently recruiting new agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Faction details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Faction details.', roots={'Faction', '/components/schemas/Faction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the faction.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the faction.', example=None, max_length=None, pattern=None), StringProperty(name='headquarters', required=True, nullable=False, default=None, python_name='headquarters', description="The waypoint in which the faction's HQ is located in.", example=None, max_length=None, pattern=None), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='List of traits that define this faction.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='FactionTrait', module_name='faction_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/FactionTrait', 'FactionTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'BUREAUCRATIC': 'BUREAUCRATIC', 'SECRETIVE': 'SECRETIVE', 'CAPITALISTIC': 'CAPITALISTIC', 'INDUSTRIOUS': 'INDUSTRIOUS', 'PEACEFUL': 'PEACEFUL', 'DISTRUSTFUL': 'DISTRUSTFUL', 'WELCOMING': 'WELCOMING', 'SMUGGLERS': 'SMUGGLERS', 'SCAVENGERS': 'SCAVENGERS', 'REBELLIOUS': 'REBELLIOUS', 'EXILES': 'EXILES', 'PIRATES': 'PIRATES', 'RAIDERS': 'RAIDERS', 'CLAN': 'CLAN', 'GUILD': 'GUILD', 'DOMINION': 'DOMINION', 'FRINGE': 'FRINGE', 'FORSAKEN': 'FORSAKEN', 'ISOLATED': 'ISOLATED', 'LOCALIZED': 'LOCALIZED', 'ESTABLISHED': 'ESTABLISHED', 'NOTABLE': 'NOTABLE', 'DOMINANT': 'DOMINANT', 'INESCAPABLE': 'INESCAPABLE', 'INNOVATIVE': 'INNOVATIVE', 'BOLD': 'BOLD', 'VISIONARY': 'VISIONARY', 'CURIOUS': 'CURIOUS', 'DARING': 'DARING', 'EXPLORATORY': 'EXPLORATORY', 'RESOURCEFUL': 'RESOURCEFUL', 'FLEXIBLE': 'FLEXIBLE', 'COOPERATIVE': 'COOPERATIVE', 'UNITED': 'UNITED', 'STRATEGIC': 'STRATEGIC', 'INTELLIGENT': 'INTELLIGENT', 'RESEARCH_FOCUSED': 'RESEARCH_FOCUSED', 'COLLABORATIVE': 'COLLABORATIVE', 'PROGRESSIVE': 'PROGRESSIVE', 'MILITARISTIC': 'MILITARISTIC', 'TECHNOLOGICALLY_ADVANCED': 'TECHNOLOGICALLY_ADVANCED', 'AGGRESSIVE': 'AGGRESSIVE', 'IMPERIALISTIC': 'IMPERIALISTIC', 'TREASURE_HUNTERS': 'TREASURE_HUNTERS', 'DEXTEROUS': 'DEXTEROUS', 'UNPREDICTABLE': 'UNPREDICTABLE', 'BRUTAL': 'BRUTAL', 'FLEETING': 'FLEETING', 'ADAPTABLE': 'ADAPTABLE', 'SELF_SUFFICIENT': 'SELF_SUFFICIENT', 'DEFENSIVE': 'DEFENSIVE', 'PROUD': 'PROUD', 'DIVERSE': 'DIVERSE', 'INDEPENDENT': 'INDEPENDENT', 'SELF_INTERESTED': 'SELF_INTERESTED', 'FRAGMENTED': 'FRAGMENTED', 'COMMERCIAL': 'COMMERCIAL', 'FREE_MARKETS': 'FREE_MARKETS', 'ENTREPRENEURIAL': 'ENTREPRENEURIAL'}, class_info=Class(name='FactionTraitSymbol', module_name='faction_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.faction_trait_symbol import FactionTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isRecruiting', required=True, nullable=False, default=None, python_name='is_recruiting', description='Whether or not the faction is currently recruiting new agents.', example=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol', 'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.faction_trait import FactionTrait'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='ship', required=True, nullable=False, default=None, python_name='ship', example=None, class_info=Class(name='Ship', module_name='ship'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'registration', 'nav', 'crew', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'cargo', 'fuel', 'cooldown'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'registration': Reference(ref='#/components/schemas/ShipRegistration'), 'nav': Reference(ref='#/components/schemas/ShipNav'), 'crew': Reference(ref='#/components/schemas/ShipCrew'), 'frame': Reference(ref='#/components/schemas/ShipFrame'), 'reactor': Reference(ref='#/components/schemas/ShipReactor'), 'engine': Reference(ref='#/components/schemas/ShipEngine'), 'cooldown': Reference(ref='#/components/schemas/Cooldown'), 'modules': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipModule'), properties=None, additionalProperties=None, description='Modules installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description='Mounts installed in this ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'cargo': Reference(ref='#/components/schemas/ShipCargo'), 'fuel': Reference(ref='#/components/schemas/ShipFuel')}, additionalProperties=None, description='Ship details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship details.', roots={'/components/schemas/Ship', 'Ship'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`', example=None, max_length=None, pattern=None), ModelProperty(name='registration', required=True, nullable=False, default=None, python_name='registration', example=None, class_info=Class(name='ShipRegistration', module_name='ship_registration'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['name', 'factionSymbol', 'role'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The agent's registered name of the ship", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factionSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the faction the ship is registered with', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'role': Reference(ref='#/components/schemas/ShipRole')}, additionalProperties=None, description='The public registration information of the ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The public registration information of the ship', roots={'/components/schemas/ShipRegistration', 'ShipRegistration'}, required_properties=[StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description="The agent's registered name of the ship", example=None, max_length=None, pattern=None), StringProperty(name='factionSymbol', required=True, nullable=False, default=None, python_name='faction_symbol', description='The symbol of the faction the ship is registered with', example=None, max_length=None, pattern=None), EnumProperty(name='role', required=True, nullable=False, python_name='role', description='The registered role of the ship', example=None, values={'FABRICATOR': 'FABRICATOR', 'HARVESTER': 'HARVESTER', 'HAULER': 'HAULER', 'INTERCEPTOR': 'INTERCEPTOR', 'EXCAVATOR': 'EXCAVATOR', 'TRANSPORT': 'TRANSPORT', 'REPAIR': 'REPAIR', 'SURVEYOR': 'SURVEYOR', 'COMMAND': 'COMMAND', 'CARRIER': 'CARRIER', 'PATROL': 'PATROL', 'SATELLITE': 'SATELLITE', 'EXPLORER': 'EXPLORER', 'REFINERY': 'REFINERY'}, class_info=Class(name='ShipRole', module_name='ship_role'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_role import ShipRole'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='nav', required=True, nullable=False, default=None, python_name='nav', example=None, class_info=Class(name='ShipNav', module_name='ship_nav'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'route': Reference(ref='#/components/schemas/ShipNavRoute'), 'status': Reference(ref='#/components/schemas/ShipNavStatus'), 'flightMode': Reference(ref='#/components/schemas/ShipNavFlightMode')}, additionalProperties=None, description='The navigation information of the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The navigation information of the ship.', roots={'/components/schemas/ShipNav', 'ShipNav'}, required_properties=[StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ModelProperty(name='route', required=True, nullable=False, default=None, python_name='route', example=None, class_info=Class(name='ShipNavRoute', module_name='ship_nav_route'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['destination', 'departure', 'origin', 'departureTime', 'arrival'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'destination': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'origin': Reference(ref='#/components/schemas/ShipNavRouteWaypoint'), 'departureTime': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's departure.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'arrival': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The routing information for the ship's most recent transit or current location.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The routing information for the ship's most recent transit or current location.", roots={'ShipNavRoute', '/components/schemas/ShipNavRoute'}, required_properties=[ModelProperty(name='destination', required=True, nullable=False, default=None, python_name='destination', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='origin', required=True, nullable=False, default=None, python_name='origin', example=None, class_info=Class(name='ShipNavRouteWaypoint', module_name='ship_nav_route_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Position in the universe in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The destination or departure of a ships nav route.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The destination or departure of a ships nav route.', roots={'/components/schemas/ShipNavRouteWaypoint', 'ShipNavRouteWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Position in the universe in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Position in the universe in the y axis.', example=None)], optional_properties=[], relative_imports={'from ..models.waypoint_type import WaypointType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), DateTimeProperty(name='departureTime', required=True, nullable=False, default=None, python_name='departure_time', description="The date time of the ship's departure.", example=None), DateTimeProperty(name='arrival', required=True, nullable=False, default=None, python_name='arrival', description="The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.", example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from typing import Dict', 'from typing import cast', 'import datetime'}, lazy_imports={'from ..models.ship_nav_route_waypoint import ShipNavRouteWaypoint'}, additional_properties=True, is_multipart_body=False), EnumProperty(name='status', required=True, nullable=False, python_name='status', description='The current status of the ship', example=None, values={'IN_TRANSIT': 'IN_TRANSIT', 'IN_ORBIT': 'IN_ORBIT', 'DOCKED': 'DOCKED'}, class_info=Class(name='ShipNavStatus', module_name='ship_nav_status'), value_type=<class 'str'>, default=None), EnumProperty(name='flightMode', required=True, nullable=False, python_name='flight_mode', description="The ship's set speed when traveling between waypoints or systems.", example=None, values={'DRIFT': 'DRIFT', 'STEALTH': 'STEALTH', 'CRUISE': 'CRUISE', 'BURN': 'BURN'}, class_info=Class(name='ShipNavFlightMode', module_name='ship_nav_flight_mode'), value_type=<class 'str'>, default='ShipNavFlightMode.CRUISE')], optional_properties=[], relative_imports={'from typing import Dict', 'from ..models.ship_nav_flight_mode import ShipNavFlightMode', 'from ..models.ship_nav_status import ShipNavStatus', 'from typing import cast'}, lazy_imports={'from ..models.ship_nav_route import ShipNavRoute'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='crew', required=True, nullable=False, default=None, python_name='crew', example=None, class_info=Class(name='ShipCrew', module_name='ship_crew'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'required', 'capacity', 'rotation', 'morale', 'wages'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The current number of crew members on the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The minimum number of crew members required to maintain the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum number of crew members the ship can support.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'rotation': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['STRICT', 'RELAXED'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", schema_format=None, default='STRICT', nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'morale': Schema(title=None, multipleOf=None, maximum=100.0, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'wages': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="The ship's crew service and maintain the ship's systems and equipment.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The ship's crew service and maintain the ship's systems and equipment.", roots={'/components/schemas/ShipCrew', 'ShipCrew'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description='The current number of crew members on the ship.', example=None), IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description='The minimum number of crew members required to maintain the ship.', example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The maximum number of crew members the ship can support.', example=None), EnumProperty(name='rotation', required=True, nullable=False, python_name='rotation', description="The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.", example=None, values={'STRICT': 'STRICT', 'RELAXED': 'RELAXED'}, class_info=Class(name='ShipCrewRotation', module_name='ship_crew_rotation'), value_type=<class 'str'>, default='ShipCrewRotation.STRICT'), IntProperty(name='morale', required=True, nullable=False, default=None, python_name='morale', description="A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.", example=None), IntProperty(name='wages', required=True, nullable=False, default=None, python_name='wages', description='The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.', example=None)], optional_properties=[], relative_imports={'from ..models.ship_crew_rotation import ShipCrewRotation'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ModelProperty(name='frame', required=True, nullable=False, default=None, python_name='frame', example=None, class_info=Class(name='ShipFrame', module_name='ship_frame'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'moduleSlots', 'mountingPoints', 'fuelCapacity', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'moduleSlots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mountingPoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fuelCapacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', roots={'/components/schemas/ShipFrame', 'ShipFrame'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the frame.', example=None, values={'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER'}, class_info=Class(name='ShipFrameSymbol', module_name='ship_frame_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the frame.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the frame.', example=None, max_length=None, pattern=None), IntProperty(name='moduleSlots', required=True, nullable=False, default=None, python_name='module_slots', description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', example=None), IntProperty(name='mountingPoints', required=True, nullable=False, default=None, python_name='mounting_points', description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', example=None), IntProperty(name='fuelCapacity', required=True, nullable=False, default=None, python_name='fuel_capacity', description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..models.ship_frame_symbol import ShipFrameSymbol', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='reactor', required=True, nullable=False, default=None, python_name='reactor', example=None, class_info=Class(name='ShipReactor', module_name='ship_reactor'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'powerOutput', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'powerOutput': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", roots={'/components/schemas/ShipReactor', 'ShipReactor'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the reactor.', example=None, values={'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I'}, class_info=Class(name='ShipReactorSymbol', module_name='ship_reactor_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the reactor.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the reactor.', example=None, max_length=None, pattern=None), IntProperty(name='powerOutput', required=True, nullable=False, default=None, python_name='power_output', description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_reactor_symbol import ShipReactorSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='engine', required=True, nullable=False, default=None, python_name='engine', example=None, class_info=Class(name='ShipEngine', module_name='ship_engine'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'speed', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'speed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The engine determines how quickly a ship travels between waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The engine determines how quickly a ship travels between waypoints.', roots={'/components/schemas/ShipEngine', 'ShipEngine'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the engine.', example=None, values={'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I'}, class_info=Class(name='ShipEngineSymbol', module_name='ship_engine_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the engine.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the engine.', example=None, max_length=None, pattern=None), IntProperty(name='speed', required=True, nullable=False, default=None, python_name='speed', description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict', 'from ..models.ship_engine_symbol import ShipEngineSymbol'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cooldown', required=True, nullable=False, default=None, python_name='cooldown', example=None, class_info=Class(name='Cooldown', module_name='cooldown'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'totalSeconds', 'remainingSeconds'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that is on cooldown', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'remainingSeconds': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The remaining duration of the cooldown in seconds', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'expiration': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The date and time when the cooldown expires in ISO 8601 format', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A cooldown is a period of time in which a ship cannot perform certain actions.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A cooldown is a period of time in which a ship cannot perform certain actions.', roots={'/components/schemas/Cooldown', 'Cooldown'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that is on cooldown', example=None, max_length=None, pattern=None), IntProperty(name='totalSeconds', required=True, nullable=False, default=None, python_name='total_seconds', description='The total duration of the cooldown in seconds', example=None), IntProperty(name='remainingSeconds', required=True, nullable=False, default=None, python_name='remaining_seconds', description='The remaining duration of the cooldown in seconds', example=None)], optional_properties=[DateTimeProperty(name='expiration', required=False, nullable=False, default=None, python_name='expiration', description='The date and time when the cooldown expires in ISO 8601 format', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'import datetime', 'from dateutil.parser import isoparse', 'from typing import cast'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modules', required=True, nullable=False, default=None, python_name='modules', description='Modules installed in this ship.', example=None, inner_property=ModelProperty(name='modules_item', required=True, nullable=False, default=None, python_name='modules_item', example=None, class_info=Class(name='ShipModule', module_name='ship_module'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'range': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', roots={'ShipModule', '/components/schemas/ShipModule'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the module.', example=None, values={'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II'}, class_info=Class(name='ShipModuleSymbol', module_name='ship_module_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this module.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of this module.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='capacity', required=False, nullable=False, default=None, python_name='capacity', description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', example=None), IntProperty(name='range', required=False, nullable=False, default=None, python_name='range_', description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_module_symbol import ShipModuleSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description='Mounts installed in this ship.', example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='fuel', required=True, nullable=False, default=None, python_name='fuel', example=None, class_info=Class(name='ShipFuel', module_name='ship_fuel'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['current', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'current': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The current amount of fuel in the ship's tanks.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The maximum amount of fuel the ship's tanks can hold.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'consumed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.", roots={'ShipFuel', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='current', required=True, nullable=False, default=None, python_name='current', description="The current amount of fuel in the ship's tanks.", example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description="The maximum amount of fuel the ship's tanks can hold.", example=None)], optional_properties=[ModelProperty(name='consumed', required=False, nullable=False, default=None, python_name='consumed', example=None, class_info=Class(name='ShipFuelConsumed', module_name='ship_fuel_consumed'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['amount', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'amount': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of fuel consumed by the most recent transit or action.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time at which the fuel was consumed.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.', roots={'ShipFuel', 'ShipFuelConsumed', '/components/schemas/ShipFuel'}, required_properties=[IntProperty(name='amount', required=True, nullable=False, default=None, python_name='amount', description='The amount of fuel consumed by the most recent transit or action.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The time at which the fuel was consumed.', example=None)], optional_properties=[], relative_imports={'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset', 'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.ship_fuel_consumed import ShipFuelConsumed'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.ship_cargo import ShipCargo', 'from ..models.cooldown import Cooldown', 'from ..models.ship_frame import ShipFrame', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_nav import ShipNav', 'from ..models.ship_registration import ShipRegistration', 'from ..models.ship_crew import ShipCrew', 'from ..models.ship_engine import ShipEngine', 'from ..models.ship_reactor import ShipReactor', 'from ..models.ship_fuel import ShipFuel', 'from ..models.ship_module import ShipModule'}, additional_properties=True, is_multipart_body=False), StringProperty(name='token', required=True, nullable=False, default=None, python_name='token', description='A Bearer token for accessing secured API endpoints.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.agent import Agent', 'from ..models.faction import Faction', 'from ..models.ship import Ship', 'from ..models.contract import Contract'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.register_response_201_data import RegisterResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='RegisterJsonBody', module_name='register_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'faction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'faction': Reference(ref='#/components/schemas/FactionSymbol'), 'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=14, minLength=3, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Your desired agent symbol. This will be a unique name used to represent your agent, and will be the prefix for your ships.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example='BADGER', deprecated=None), 'email': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Your email address. This is used if you reserved your call sign between resets.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'RegisterJsonBody'}, required_properties=[EnumProperty(name='faction', required=True, nullable=False, python_name='faction', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='Your desired agent symbol. This will be a unique name used to represent your agent, and will be the prefix for your ships.', example='BADGER', max_length=None, pattern=None)], optional_properties=[StringProperty(name='email', required=False, nullable=False, default=None, python_name='email', description='Your email address. This is used if you reserved your call sign between resets.', example=None, max_length=None, pattern=None)], relative_imports={'from ..models.faction_symbol import FactionSymbol', 'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers=set())
from .register import asyncio_detailed as register_asyncio
from .register import sync_detailed as register

__all__ = (
    "get_status",
    "get_status_asyncio",
    "register",
    "register_asyncio",
)
