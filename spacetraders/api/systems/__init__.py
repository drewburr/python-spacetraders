""" Contains methods for accessing the API """

# Endpoint(path='/systems', method='get', description='Return a paginated list of all systems.', name='get-systems', requires_security=True, tag='systems', summary='List Systems', relative_imports={'from ...models.get_systems_response_200 import GetSystemsResponse200', 'from typing import Optional', 'from typing import Union', 'from ...types import UNSET, Unset', 'from typing import cast', 'from typing import Dict'}, query_parameters={'page': IntProperty(name='page', required=False, nullable=True, default=1, python_name='page', description=None, example=None), 'limit': IntProperty(name='limit', required=False, nullable=True, default=10, python_name='limit', description=None, example=None)}, path_parameters=OrderedDict(), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetSystemsResponse200', module_name='get_systems_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data', 'meta'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/System'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'meta': Reference(ref='#/components/schemas/Meta')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetSystemsResponse200'}, required_properties=[ListProperty(name='data', required=True, nullable=False, default=None, python_name='data', description=None, example=None, inner_property=ModelProperty(name='data_item', required=True, nullable=False, default=None, python_name='data_item', example=None, class_info=Class(name='System', module_name='system'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'sectorSymbol', 'type', 'x', 'y', 'waypoints', 'factions'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'sectorSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the sector.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/SystemType'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Relative position of the system in the sector in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Relative position of the system in the sector in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'waypoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SystemWaypoint'), properties=None, additionalProperties=None, description='Waypoints in this system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factions': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SystemFaction'), properties=None, additionalProperties=None, description='Factions that control this system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/System', 'System'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='sectorSymbol', required=True, nullable=False, default=None, python_name='sector_symbol', description='The symbol of the sector.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of system.', example=None, values={'NEUTRON_STAR': 'NEUTRON_STAR', 'RED_STAR': 'RED_STAR', 'ORANGE_STAR': 'ORANGE_STAR', 'BLUE_STAR': 'BLUE_STAR', 'YOUNG_STAR': 'YOUNG_STAR', 'WHITE_DWARF': 'WHITE_DWARF', 'BLACK_HOLE': 'BLACK_HOLE', 'HYPERGIANT': 'HYPERGIANT', 'NEBULA': 'NEBULA', 'UNSTABLE': 'UNSTABLE'}, class_info=Class(name='SystemType', module_name='system_type'), value_type=<class 'str'>, default=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Relative position of the system in the sector in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Relative position of the system in the sector in the y axis.', example=None), ListProperty(name='waypoints', required=True, nullable=False, default=None, python_name='waypoints', description='Waypoints in this system.', example=None, inner_property=ModelProperty(name='waypoints_item', required=True, nullable=False, default=None, python_name='waypoints_item', example=None, class_info=Class(name='SystemWaypoint', module_name='system_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'x', 'y', 'orbitals'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'type': Reference(ref='#/components/schemas/WaypointType'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbitals': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointOrbital'), properties=None, additionalProperties=None, description='Waypoints that orbit this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/SystemWaypoint', 'SystemWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", example=None), ListProperty(name='orbitals', required=True, nullable=False, default=None, python_name='orbitals', description='Waypoints that orbit this waypoint.', example=None, inner_property=ModelProperty(name='orbitals_item', required=True, nullable=False, default=None, python_name='orbitals_item', example=None, class_info=Class(name='WaypointOrbital', module_name='waypoint_orbital'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the orbiting waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An orbital is another waypoint that orbits a parent waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An orbital is another waypoint that orbits a parent waypoint.', roots={'/components/schemas/WaypointOrbital', 'WaypointOrbital'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the orbiting waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[StringProperty(name='orbits', required=False, nullable=False, default=None, python_name='orbits', description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.waypoint_type import WaypointType', 'from typing import Dict'}, lazy_imports={'from ..models.waypoint_orbital import WaypointOrbital'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='factions', required=True, nullable=False, default=None, python_name='factions', description='Factions that control this system.', example=None, inner_property=ModelProperty(name='factions_item', required=True, nullable=False, default=None, python_name='factions_item', example=None, class_info=Class(name='SystemFaction', module_name='system_faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/SystemFaction', 'SystemFaction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from ..models.system_type import SystemType', 'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.system_waypoint import SystemWaypoint', 'from ..models.system_faction import SystemFaction'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='meta', required=True, nullable=False, default=None, python_name='meta', example=None, class_info=Class(name='Meta', module_name='meta'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['total', 'page', 'limit'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'total': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Shows the total amount of items of this kind that exist.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'page': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', schema_format=None, default=1, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'limit': Schema(title=None, multipleOf=None, maximum=20.0, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of items in each page. Limits how many items can be fetched at once.', schema_format=None, default=10, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Meta details for pagination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None, x-examples={'example-1': {'total': 6, 'page': 1, 'limit': 20}}), description='Meta details for pagination.', roots={'Meta', '/components/schemas/Meta'}, required_properties=[IntProperty(name='total', required=True, nullable=False, default=None, python_name='total', description='Shows the total amount of items of this kind that exist.', example=None), IntProperty(name='page', required=True, nullable=False, default=1, python_name='page', description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', example=None), IntProperty(name='limit', required=True, nullable=False, default=10, python_name='limit', description='The amount of items in each page. Limits how many items can be fetched at once.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.system import System', 'from ..models.meta import Meta'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'page', 'limit'})
# Endpoint(path='/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction', method='get', description='Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.', name='get-construction', requires_security=True, tag='systems', summary='Get Construction Site', relative_imports={'from ...models.get_construction_response_200 import GetConstructionResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None)), ('waypointSymbol', StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetConstructionResponse200', module_name='get_construction_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Construction')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetConstructionResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Construction', module_name='construction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'materials', 'isComplete'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'materials': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ConstructionMaterial'), properties=None, additionalProperties=None, description='The materials required to construct the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'isComplete': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the waypoint has been constructed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The construction details of a waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The construction details of a waypoint.', roots={'/components/schemas/Construction', 'Construction'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ListProperty(name='materials', required=True, nullable=False, default=None, python_name='materials', description='The materials required to construct the waypoint.', example=None, inner_property=ModelProperty(name='materials_item', required=True, nullable=False, default=None, python_name='materials_item', example=None, class_info=Class(name='ConstructionMaterial', module_name='construction_material'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'required', 'fulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Reference(ref='#/components/schemas/TradeSymbol'), 'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units required.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled toward the required amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of the required construction materials for a given waypoint under construction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of the required construction materials for a given waypoint under construction.', roots={'ConstructionMaterial', '/components/schemas/ConstructionMaterial'}, required_properties=[EnumProperty(name='tradeSymbol', required=True, nullable=False, python_name='trade_symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description='The number of units required.', example=None), IntProperty(name='fulfilled', required=True, nullable=False, default=None, python_name='fulfilled', description='The number of units fulfilled toward the required amount.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isComplete', required=True, nullable=False, default=None, python_name='is_complete', description='Whether the waypoint has been constructed.', example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.construction_material import ConstructionMaterial'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.construction import Construction'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'waypoint_symbol', 'system_symbol'})
from .get_construction import asyncio_detailed as get_construction_asyncio
from .get_construction import sync_detailed as get_construction

# Endpoint(path='/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate', method='get', description='Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.\n\nWaypoints connected to this jump gate can be ', name='get-jump-gate', requires_security=True, tag='systems', summary='Get Jump Gate', relative_imports={'from ...models.get_jump_gate_response_200 import GetJumpGateResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None)), ('waypointSymbol', StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetJumpGateResponse200', module_name='get_jump_gate_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/JumpGate')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetJumpGateResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='JumpGate', module_name='jump_gate'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'connections'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'connections': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint that has a corresponding gate.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='All the gates that are connected to this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'JumpGate', '/components/schemas/JumpGate'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ListProperty(name='connections', required=True, nullable=False, default=None, python_name='connections', description='All the gates that are connected to this waypoint.', example=None, inner_property=StringProperty(name='connections_item', required=True, nullable=False, default=None, python_name='connections_item', description='The symbol of the waypoint that has a corresponding gate.', example=None, max_length=None, pattern=None))], optional_properties=[], relative_imports={'from typing import cast, List'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.jump_gate import JumpGate'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'waypoint_symbol', 'system_symbol'})
from .get_jump_gate import asyncio_detailed as get_jump_gate_asyncio
from .get_jump_gate import sync_detailed as get_jump_gate

# Endpoint(path='/systems/{systemSymbol}/waypoints/{waypointSymbol}/market', method='get', description='Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.\n\nSend a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.', name='get-market', requires_security=True, tag='systems', summary='Get Market', relative_imports={'from typing import Dict', 'from ...models.get_market_response_200 import GetMarketResponse200', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None)), ('waypointSymbol', StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetMarketResponse200', module_name='get_market_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Market')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetMarketResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Market', module_name='market'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'exports', 'imports', 'exchange'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the market. The symbol is the same as the waypoint where the market is located.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'exports': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/TradeGood'), properties=None, additionalProperties=None, description='The list of goods that are exported from this market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'imports': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/TradeGood'), properties=None, additionalProperties=None, description='The list of goods that are sought as imports in this market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'exchange': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/TradeGood'), properties=None, additionalProperties=None, description='The list of goods that are bought and sold between agents at this market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'transactions': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/MarketTransaction'), properties=None, additionalProperties=None, description='The list of recent transactions at this market. Visible only when a ship is present at the market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeGoods': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/MarketTradeGood'), properties=None, additionalProperties=None, description='The list of goods that are traded at this market. Visible only when a ship is present at the market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/Market', 'Market'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the market. The symbol is the same as the waypoint where the market is located.', example=None, max_length=None, pattern=None), ListProperty(name='exports', required=True, nullable=False, default=None, python_name='exports', description='The list of goods that are exported from this market.', example=None, inner_property=ModelProperty(name='exports_item', required=True, nullable=False, default=None, python_name='exports_item', example=None, class_info=Class(name='TradeGood', module_name='trade_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A good that can be traded for other goods or currency.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A good that can be traded for other goods or currency.', roots={'/components/schemas/TradeGood', 'TradeGood'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the good.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the good.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='imports', required=True, nullable=False, default=None, python_name='imports', description='The list of goods that are sought as imports in this market.', example=None, inner_property=ModelProperty(name='imports_item', required=True, nullable=False, default=None, python_name='imports_item', example=None, class_info=Class(name='TradeGood', module_name='trade_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A good that can be traded for other goods or currency.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A good that can be traded for other goods or currency.', roots={'/components/schemas/TradeGood', 'TradeGood'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the good.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the good.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='exchange', required=True, nullable=False, default=None, python_name='exchange', description='The list of goods that are bought and sold between agents at this market.', example=None, inner_property=ModelProperty(name='exchange_item', required=True, nullable=False, default=None, python_name='exchange_item', example=None, class_info=Class(name='TradeGood', module_name='trade_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A good that can be traded for other goods or currency.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A good that can be traded for other goods or currency.', roots={'/components/schemas/TradeGood', 'TradeGood'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the good.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the good.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[ListProperty(name='transactions', required=False, nullable=False, default=None, python_name='transactions', description='The list of recent transactions at this market. Visible only when a ship is present at the market.', example=None, inner_property=ModelProperty(name='transactions_item', required=True, nullable=False, default=None, python_name='transactions_item', example=None, class_info=Class(name='MarketTransaction', module_name='market_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'type', 'units', 'pricePerUnit', 'totalPrice', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the trade good.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['PURCHASE', 'SELL'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'pricePerUnit': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price per unit of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'totalPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The total price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Result of a transaction with a market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Result of a transaction with a market.', roots={'/components/schemas/MarketTransaction', 'MarketTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that made the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the trade good.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of transaction.', example=None, values={'PURCHASE': 'PURCHASE', 'SELL': 'SELL'}, class_info=Class(name='MarketTransactionType', module_name='market_transaction_type'), value_type=<class 'str'>, default=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the transaction.', example=None), IntProperty(name='pricePerUnit', required=True, nullable=False, default=None, python_name='price_per_unit', description='The price per unit of the transaction.', example=None), IntProperty(name='totalPrice', required=True, nullable=False, default=None, python_name='total_price', description='The total price of the transaction.', example=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'from dateutil.parser import isoparse', 'from ..models.market_transaction_type import MarketTransactionType', 'from typing import cast', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='tradeGoods', required=False, nullable=False, default=None, python_name='trade_goods', description='The list of goods that are traded at this market. Visible only when a ship is present at the market.', example=None, inner_property=ModelProperty(name='tradeGoods_item', required=True, nullable=False, default=None, python_name='trade_goods_item', example=None, class_info=Class(name='MarketTradeGood', module_name='market_trade_good'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'tradeVolume', 'supply', 'purchasePrice', 'sellPrice'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'type': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['EXPORT', 'IMPORT', 'EXCHANGE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The type of trade good (export, import, or exchange).', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeVolume': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'supply': Reference(ref='#/components/schemas/SupplyLevel'), 'activity': Reference(ref='#/components/schemas/ActivityLevel'), 'purchasePrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price at which this good can be purchased from the market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'sellPrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price at which this good can be sold to the market.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/MarketTradeGood', 'MarketTradeGood'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of trade good (export, import, or exchange).', example=None, values={'EXPORT': 'EXPORT', 'IMPORT': 'IMPORT', 'EXCHANGE': 'EXCHANGE'}, class_info=Class(name='MarketTradeGoodType', module_name='market_trade_good_type'), value_type=<class 'str'>, default=None), IntProperty(name='tradeVolume', required=True, nullable=False, default=None, python_name='trade_volume', description='This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.', example=None), EnumProperty(name='supply', required=True, nullable=False, python_name='supply', description='The supply level of a trade good.', example=None, values={'SCARCE': 'SCARCE', 'LIMITED': 'LIMITED', 'MODERATE': 'MODERATE', 'HIGH': 'HIGH', 'ABUNDANT': 'ABUNDANT'}, class_info=Class(name='SupplyLevel', module_name='supply_level'), value_type=<class 'str'>, default=None), IntProperty(name='purchasePrice', required=True, nullable=False, default=None, python_name='purchase_price', description='The price at which this good can be purchased from the market.', example=None), IntProperty(name='sellPrice', required=True, nullable=False, default=None, python_name='sell_price', description='The price at which this good can be sold to the market.', example=None)], optional_properties=[EnumProperty(name='activity', required=False, nullable=False, python_name='activity', description='The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.', example=None, values={'WEAK': 'WEAK', 'GROWING': 'GROWING', 'STRONG': 'STRONG', 'RESTRICTED': 'RESTRICTED'}, class_info=Class(name='ActivityLevel', module_name='activity_level'), value_type=<class 'str'>, default=None)], relative_imports={'from ..models.supply_level import SupplyLevel', 'from ..models.trade_symbol import TradeSymbol', 'from ..models.activity_level import ActivityLevel', 'from ..models.market_trade_good_type import MarketTradeGoodType', 'from ..types import UNSET, Unset', 'from typing import Union'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.trade_good import TradeGood', 'from ..models.market_trade_good import MarketTradeGood', 'from ..models.market_transaction import MarketTransaction'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.market import Market'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'waypoint_symbol', 'system_symbol'})
from .get_market import asyncio_detailed as get_market_asyncio
from .get_market import sync_detailed as get_market

# Endpoint(path='/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard', method='get', description='Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.', name='get-shipyard', requires_security=True, tag='systems', summary='Get Shipyard', relative_imports={'from ...models.get_shipyard_response_200 import GetShipyardResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None)), ('waypointSymbol', StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetShipyardResponse200', module_name='get_shipyard_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Shipyard')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetShipyardResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Shipyard', module_name='shipyard'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'shipTypes', 'modificationsFee'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'shipTypes': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['type'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'type': Reference(ref='#/components/schemas/ShipType')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='The list of ship types available for purchase at this shipyard.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'transactions': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipyardTransaction'), properties=None, additionalProperties=None, description='The list of recent transactions at this shipyard.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'ships': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipyardShip'), properties=None, additionalProperties=None, description='The ships that are currently available for purchase at the shipyard.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'modificationsFee': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/Shipyard', 'Shipyard'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.', example=None, max_length=None, pattern=None), ListProperty(name='shipTypes', required=True, nullable=False, default=None, python_name='ship_types', description='The list of ship types available for purchase at this shipyard.', example=None, inner_property=ModelProperty(name='shipTypes_item', required=True, nullable=False, default=None, python_name='ship_types_item', example=None, class_info=Class(name='ShipyardShipTypesItem', module_name='shipyard_ship_types_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['type'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'type': Reference(ref='#/components/schemas/ShipType')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'ShipyardShipTypesItem', '/components/schemas/Shipyard', 'Shipyard'}, required_properties=[EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of ship', example=None, values={'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='ShipType', module_name='ship_type'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.ship_type import ShipType'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), IntProperty(name='modificationsFee', required=True, nullable=False, default=None, python_name='modifications_fee', description='The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.', example=None)], optional_properties=[ListProperty(name='transactions', required=False, nullable=False, default=None, python_name='transactions', description='The list of recent transactions at this shipyard.', example=None, inner_property=ModelProperty(name='transactions_item', required=True, nullable=False, default=None, python_name='transactions_item', example=None, class_info=Class(name='ShipyardTransaction', module_name='shipyard_transaction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['waypointSymbol', 'shipSymbol', 'shipType', 'price', 'agentSymbol', 'timestamp'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that was the subject of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=True), 'shipType': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the ship that was the subject of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'price': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The price of the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'agentSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the agent that made the transaction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'timestamp': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The timestamp of the transaction.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Results of a transaction with a shipyard.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Results of a transaction with a shipyard.', roots={'/components/schemas/ShipyardTransaction', 'ShipyardTransaction'}, required_properties=[StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='The symbol of the ship that was the subject of the transaction.', example=None, max_length=None, pattern=None), StringProperty(name='shipType', required=True, nullable=False, default=None, python_name='ship_type', description='The symbol of the ship that was the subject of the transaction.', example=None, max_length=None, pattern=None), IntProperty(name='price', required=True, nullable=False, default=None, python_name='price', description='The price of the transaction.', example=None), StringProperty(name='agentSymbol', required=True, nullable=False, default=None, python_name='agent_symbol', description='The symbol of the agent that made the transaction.', example=None, max_length=None, pattern=None), DateTimeProperty(name='timestamp', required=True, nullable=False, default=None, python_name='timestamp', description='The timestamp of the transaction.', example=None)], optional_properties=[], relative_imports={'import datetime', 'from typing import cast', 'from dateutil.parser import isoparse'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='ships', required=False, nullable=False, default=None, python_name='ships', description='The ships that are currently available for purchase at the shipyard.', example=None, inner_property=ModelProperty(name='ships_item', required=True, nullable=False, default=None, python_name='ships_item', example=None, class_info=Class(name='ShipyardShip', module_name='shipyard_ship'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['type', 'symbol', 'name', 'description', 'supply', 'purchasePrice', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'crew'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'type': Reference(ref='#/components/schemas/ShipType'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'supply': Reference(ref='#/components/schemas/SupplyLevel'), 'activity': Reference(ref='#/components/schemas/ActivityLevel'), 'purchasePrice': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'frame': Reference(ref='#/components/schemas/ShipFrame'), 'reactor': Reference(ref='#/components/schemas/ShipReactor'), 'engine': Reference(ref='#/components/schemas/ShipEngine'), 'modules': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipModule'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mounts': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipMount'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['required', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/ShipyardShip', 'ShipyardShip'}, required_properties=[EnumProperty(name='type', required=True, nullable=False, python_name='type', description='Type of ship', example=None, values={'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='ShipType', module_name='ship_type'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description=None, example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description=None, example=None, max_length=None, pattern=None), EnumProperty(name='supply', required=True, nullable=False, python_name='supply', description='The supply level of a trade good.', example=None, values={'SCARCE': 'SCARCE', 'LIMITED': 'LIMITED', 'MODERATE': 'MODERATE', 'HIGH': 'HIGH', 'ABUNDANT': 'ABUNDANT'}, class_info=Class(name='SupplyLevel', module_name='supply_level'), value_type=<class 'str'>, default=None), IntProperty(name='purchasePrice', required=True, nullable=False, default=None, python_name='purchase_price', description=None, example=None), ModelProperty(name='frame', required=True, nullable=False, default=None, python_name='frame', example=None, class_info=Class(name='ShipFrame', module_name='ship_frame'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'moduleSlots', 'mountingPoints', 'fuelCapacity', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the frame.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'moduleSlots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'mountingPoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fuelCapacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.', roots={'/components/schemas/ShipFrame', 'ShipFrame'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the frame.', example=None, values={'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER'}, class_info=Class(name='ShipFrameSymbol', module_name='ship_frame_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the frame.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the frame.', example=None, max_length=None, pattern=None), IntProperty(name='moduleSlots', required=True, nullable=False, default=None, python_name='module_slots', description='The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.', example=None), IntProperty(name='mountingPoints', required=True, nullable=False, default=None, python_name='mounting_points', description='The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.', example=None), IntProperty(name='fuelCapacity', required=True, nullable=False, default=None, python_name='fuel_capacity', description='The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..models.ship_frame_symbol import ShipFrameSymbol', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='reactor', required=True, nullable=False, default=None, python_name='reactor', example=None, class_info=Class(name='ShipReactor', module_name='ship_reactor'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'powerOutput', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'powerOutput': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description="The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.", roots={'/components/schemas/ShipReactor', 'ShipReactor'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbol of the reactor.', example=None, values={'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I'}, class_info=Class(name='ShipReactorSymbol', module_name='ship_reactor_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of the reactor.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of the reactor.', example=None, max_length=None, pattern=None), IntProperty(name='powerOutput', required=True, nullable=False, default=None, python_name='power_output', description="The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power.", example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_reactor_symbol import ShipReactorSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='engine', required=True, nullable=False, default=None, python_name='engine', example=None, class_info=Class(name='ShipEngine', module_name='ship_engine'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'speed', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the engine.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'condition': Reference(ref='#/components/schemas/ShipCondition'), 'speed': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='The engine determines how quickly a ship travels between waypoints.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The engine determines how quickly a ship travels between waypoints.', roots={'/components/schemas/ShipEngine', 'ShipEngine'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the engine.', example=None, values={'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I'}, class_info=Class(name='ShipEngineSymbol', module_name='ship_engine_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the engine.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the engine.', example=None, max_length=None, pattern=None), IntProperty(name='speed', required=True, nullable=False, default=None, python_name='speed', description='The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.', example=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='condition', required=False, nullable=False, default=None, python_name='condition', description='Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict', 'from ..models.ship_engine_symbol import ShipEngineSymbol'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False), ListProperty(name='modules', required=True, nullable=False, default=None, python_name='modules', description=None, example=None, inner_property=ModelProperty(name='modules_item', required=True, nullable=False, default=None, python_name='modules_item', example=None, class_info=Class(name='ShipModule', module_name='ship_module'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'range': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this module.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.', roots={'ShipModule', '/components/schemas/ShipModule'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the module.', example=None, values={'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II'}, class_info=Class(name='ShipModuleSymbol', module_name='ship_module_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this module.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='Description of this module.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[IntProperty(name='capacity', required=False, nullable=False, default=None, python_name='capacity', description='Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.', example=None), IntProperty(name='range', required=False, nullable=False, default=None, python_name='range_', description='Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.ship_module_symbol import ShipModuleSymbol', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='mounts', required=True, nullable=False, default=None, python_name='mounts', description=None, example=None, inner_property=ModelProperty(name='mounts_item', required=True, nullable=False, default=None, python_name='mounts_item', example=None, class_info=Class(name='ShipMount', module_name='ship_mount'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'requirements'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbo of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Name of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Description of this mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'strength': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'deposits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE'], type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), properties=None, additionalProperties=None, description='Mounts that have this value denote what goods can be produced from using the mount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'requirements': Reference(ref='#/components/schemas/ShipRequirements')}, additionalProperties=None, description='A mount is installed on the exterier of a ship.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A mount is installed on the exterier of a ship.', roots={'/components/schemas/ShipMount', 'ShipMount'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='Symbo of this mount.', example=None, values={'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I'}, class_info=Class(name='ShipMountSymbol', module_name='ship_mount_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='Name of this mount.', example=None, max_length=None, pattern=None), ModelProperty(name='requirements', required=True, nullable=False, default=None, python_name='requirements', example=None, class_info=Class(name='ShipRequirements', module_name='ship_requirements'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'power': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of power required from the reactor.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'crew': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of crew required for operation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'slots': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of module slots required for installation.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The requirements for installation on a ship', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The requirements for installation on a ship', roots={'/components/schemas/ShipRequirements', 'ShipRequirements'}, required_properties=[], optional_properties=[IntProperty(name='power', required=False, nullable=False, default=None, python_name='power', description='The amount of power required from the reactor.', example=None), IntProperty(name='crew', required=False, nullable=False, default=None, python_name='crew', description='The number of crew required for operation.', example=None), IntProperty(name='slots', required=False, nullable=False, default=None, python_name='slots', description='The number of module slots required for installation.', example=None)], relative_imports={'from typing import Union', 'from ..types import UNSET, Unset'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[StringProperty(name='description', required=False, nullable=False, default=None, python_name='description', description='Description of this mount.', example=None, max_length=None, pattern=None), IntProperty(name='strength', required=False, nullable=False, default=None, python_name='strength', description="Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.", example=None), ListProperty(name='deposits', required=False, nullable=False, default=None, python_name='deposits', description='Mounts that have this value denote what goods can be produced from using the mount.', example=None, inner_property=EnumProperty(name='deposits_item', required=True, nullable=False, python_name='deposits_item', description=None, example=None, values={'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'PRECIOUS_STONES': 'PRECIOUS_STONES', 'ICE_WATER': 'ICE_WATER', 'AMMONIA_ICE': 'AMMONIA_ICE', 'IRON_ORE': 'IRON_ORE', 'COPPER_ORE': 'COPPER_ORE', 'SILVER_ORE': 'SILVER_ORE', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM_ORE': 'MERITIUM_ORE'}, class_info=Class(name='ShipMountDepositsItem', module_name='ship_mount_deposits_item'), value_type=<class 'str'>, default=None))], relative_imports={'from ..models.ship_mount_deposits_item import ShipMountDepositsItem', 'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from ..models.ship_mount_symbol import ShipMountSymbol', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_requirements import ShipRequirements'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='crew', required=True, nullable=False, default=None, python_name='crew', example=None, class_info=Class(name='ShipyardShipCrew', module_name='shipyard_ship_crew'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['required', 'capacity'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/ShipyardShip', 'ShipyardShipCrew', 'ShipyardShip'}, required_properties=[IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description=None, example=None), IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description=None, example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[EnumProperty(name='activity', required=False, nullable=False, python_name='activity', description='The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.', example=None, values={'WEAK': 'WEAK', 'GROWING': 'GROWING', 'STRONG': 'STRONG', 'RESTRICTED': 'RESTRICTED'}, class_info=Class(name='ActivityLevel', module_name='activity_level'), value_type=<class 'str'>, default=None)], relative_imports={'from ..models.supply_level import SupplyLevel', 'from typing import cast, List', 'from ..models.ship_type import ShipType', 'from ..models.activity_level import ActivityLevel', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.ship_frame import ShipFrame', 'from ..models.shipyard_ship_crew import ShipyardShipCrew', 'from ..models.ship_mount import ShipMount', 'from ..models.ship_reactor import ShipReactor', 'from ..models.ship_engine import ShipEngine', 'from ..models.ship_module import ShipModule'}, additional_properties=True, is_multipart_body=False))], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from typing import Dict'}, lazy_imports={'from ..models.shipyard_ship_types_item import ShipyardShipTypesItem', 'from ..models.shipyard_transaction import ShipyardTransaction', 'from ..models.shipyard_ship import ShipyardShip'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.shipyard import Shipyard'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'waypoint_symbol', 'system_symbol'})
from .get_shipyard import asyncio_detailed as get_shipyard_asyncio
from .get_shipyard import sync_detailed as get_shipyard

# Endpoint(path='/systems/{systemSymbol}', method='get', description='Get the details of a system.', name='get-system', requires_security=True, tag='systems', summary='Get System', relative_imports={'from ...models.get_system_response_200 import GetSystemResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default="'X1-OE'", python_name='system_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetSystemResponse200', module_name='get_system_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/System')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetSystemResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='System', module_name='system'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'sectorSymbol', 'type', 'x', 'y', 'waypoints', 'factions'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'sectorSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the sector.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'type': Reference(ref='#/components/schemas/SystemType'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Relative position of the system in the sector in the x axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Relative position of the system in the sector in the y axis.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'waypoints': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SystemWaypoint'), properties=None, additionalProperties=None, description='Waypoints in this system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'factions': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/SystemFaction'), properties=None, additionalProperties=None, description='Factions that control this system.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/System', 'System'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), StringProperty(name='sectorSymbol', required=True, nullable=False, default=None, python_name='sector_symbol', description='The symbol of the sector.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of system.', example=None, values={'NEUTRON_STAR': 'NEUTRON_STAR', 'RED_STAR': 'RED_STAR', 'ORANGE_STAR': 'ORANGE_STAR', 'BLUE_STAR': 'BLUE_STAR', 'YOUNG_STAR': 'YOUNG_STAR', 'WHITE_DWARF': 'WHITE_DWARF', 'BLACK_HOLE': 'BLACK_HOLE', 'HYPERGIANT': 'HYPERGIANT', 'NEBULA': 'NEBULA', 'UNSTABLE': 'UNSTABLE'}, class_info=Class(name='SystemType', module_name='system_type'), value_type=<class 'str'>, default=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description='Relative position of the system in the sector in the x axis.', example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description='Relative position of the system in the sector in the y axis.', example=None), ListProperty(name='waypoints', required=True, nullable=False, default=None, python_name='waypoints', description='Waypoints in this system.', example=None, inner_property=ModelProperty(name='waypoints_item', required=True, nullable=False, default=None, python_name='waypoints_item', example=None, class_info=Class(name='SystemWaypoint', module_name='system_waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'x', 'y', 'orbitals'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'type': Reference(ref='#/components/schemas/WaypointType'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbitals': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointOrbital'), properties=None, additionalProperties=None, description='Waypoints that orbit this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/SystemWaypoint', 'SystemWaypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", example=None), ListProperty(name='orbitals', required=True, nullable=False, default=None, python_name='orbitals', description='Waypoints that orbit this waypoint.', example=None, inner_property=ModelProperty(name='orbitals_item', required=True, nullable=False, default=None, python_name='orbitals_item', example=None, class_info=Class(name='WaypointOrbital', module_name='waypoint_orbital'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the orbiting waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An orbital is another waypoint that orbits a parent waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An orbital is another waypoint that orbits a parent waypoint.', roots={'/components/schemas/WaypointOrbital', 'WaypointOrbital'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the orbiting waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[StringProperty(name='orbits', required=False, nullable=False, default=None, python_name='orbits', description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', example=None, max_length=None, pattern=None)], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.waypoint_type import WaypointType', 'from typing import Dict'}, lazy_imports={'from ..models.waypoint_orbital import WaypointOrbital'}, additional_properties=True, is_multipart_body=False)), ListProperty(name='factions', required=True, nullable=False, default=None, python_name='factions', description='Factions that control this system.', example=None, inner_property=ModelProperty(name='factions_item', required=True, nullable=False, default=None, python_name='factions_item', example=None, class_info=Class(name='SystemFaction', module_name='system_faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/SystemFaction', 'SystemFaction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from ..models.system_type import SystemType', 'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.system_waypoint import SystemWaypoint', 'from ..models.system_faction import SystemFaction'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.system import System'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'system_symbol'})
from .get_system import asyncio_detailed as get_system_asyncio
from .get_system import sync_detailed as get_system

# Endpoint(path='/systems/{systemSymbol}/waypoints', method='get', description='Return a paginated list of all of the waypoints for a given system.\n\nIf a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.', name='get-system-waypoints', requires_security=True, tag='systems', summary='List Waypoints in System', relative_imports={'from typing import cast, List', 'from typing import cast, Union', 'from ...models.waypoint_type import WaypointType', 'from typing import Optional', 'from typing import Union', 'from ...types import UNSET, Unset', 'from ...models.get_system_waypoints_response_200 import GetSystemWaypointsResponse200', 'from ...models.waypoint_trait_symbol import WaypointTraitSymbol', 'from typing import cast', 'from typing import Dict'}, query_parameters={'page': IntProperty(name='page', required=False, nullable=True, default=1, python_name='page', description=None, example=None), 'limit': IntProperty(name='limit', required=False, nullable=True, default=10, python_name='limit', description=None, example=None), 'type': EnumProperty(name='type', required=False, nullable=True, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), 'traits': UnionProperty(name='traits', required=False, nullable=True, default=None, python_name='traits', description=None, example=None, inner_properties=[EnumProperty(name='traits_type_0', required=False, nullable=False, python_name='traits_type_0', description='The unique identifier of the trait.', example=None, values={'UNCHARTED': 'UNCHARTED', 'UNDER_CONSTRUCTION': 'UNDER_CONSTRUCTION', 'MARKETPLACE': 'MARKETPLACE', 'SHIPYARD': 'SHIPYARD', 'OUTPOST': 'OUTPOST', 'SCATTERED_SETTLEMENTS': 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES': 'SPRAWLING_CITIES', 'MEGA_STRUCTURES': 'MEGA_STRUCTURES', 'PIRATE_BASE': 'PIRATE_BASE', 'OVERCROWDED': 'OVERCROWDED', 'HIGH_TECH': 'HIGH_TECH', 'CORRUPT': 'CORRUPT', 'BUREAUCRATIC': 'BUREAUCRATIC', 'TRADING_HUB': 'TRADING_HUB', 'INDUSTRIAL': 'INDUSTRIAL', 'BLACK_MARKET': 'BLACK_MARKET', 'RESEARCH_FACILITY': 'RESEARCH_FACILITY', 'MILITARY_BASE': 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST': 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST': 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS': 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS': 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS': 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS': 'RARE_METAL_DEPOSITS', 'METHANE_POOLS': 'METHANE_POOLS', 'ICE_CRYSTALS': 'ICE_CRYSTALS', 'EXPLOSIVE_GASES': 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE': 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS': 'VIBRANT_AURORAS', 'SALT_FLATS': 'SALT_FLATS', 'CANYONS': 'CANYONS', 'PERPETUAL_DAYLIGHT': 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST': 'PERPETUAL_OVERCAST', 'DRY_SEABEDS': 'DRY_SEABEDS', 'MAGMA_SEAS': 'MAGMA_SEAS', 'SUPERVOLCANOES': 'SUPERVOLCANOES', 'ASH_CLOUDS': 'ASH_CLOUDS', 'VAST_RUINS': 'VAST_RUINS', 'MUTATED_FLORA': 'MUTATED_FLORA', 'TERRAFORMED': 'TERRAFORMED', 'EXTREME_TEMPERATURES': 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE': 'EXTREME_PRESSURE', 'DIVERSE_LIFE': 'DIVERSE_LIFE', 'SCARCE_LIFE': 'SCARCE_LIFE', 'FOSSILS': 'FOSSILS', 'WEAK_GRAVITY': 'WEAK_GRAVITY', 'STRONG_GRAVITY': 'STRONG_GRAVITY', 'CRUSHING_GRAVITY': 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE': 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE': 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE': 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE': 'THIN_ATMOSPHERE', 'JOVIAN': 'JOVIAN', 'ROCKY': 'ROCKY', 'VOLCANIC': 'VOLCANIC', 'FROZEN': 'FROZEN', 'SWAMP': 'SWAMP', 'BARREN': 'BARREN', 'TEMPERATE': 'TEMPERATE', 'JUNGLE': 'JUNGLE', 'OCEAN': 'OCEAN', 'RADIOACTIVE': 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES': 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER': 'DEBRIS_CLUSTER', 'DEEP_CRATERS': 'DEEP_CRATERS', 'SHALLOW_CRATERS': 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION': 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR': 'HOLLOWED_INTERIOR', 'STRIPPED': 'STRIPPED'}, class_info=Class(name='WaypointTraitSymbol', module_name='waypoint_trait_symbol'), value_type=<class 'str'>, default=None), ListProperty(name='traits_type_1', required=False, nullable=False, default=None, python_name='traits_type_1', description=None, example=None, inner_property=EnumProperty(name='traits_type_1_item', required=True, nullable=False, python_name='traits_type_1_item', description='The unique identifier of the trait.', example=None, values={'UNCHARTED': 'UNCHARTED', 'UNDER_CONSTRUCTION': 'UNDER_CONSTRUCTION', 'MARKETPLACE': 'MARKETPLACE', 'SHIPYARD': 'SHIPYARD', 'OUTPOST': 'OUTPOST', 'SCATTERED_SETTLEMENTS': 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES': 'SPRAWLING_CITIES', 'MEGA_STRUCTURES': 'MEGA_STRUCTURES', 'PIRATE_BASE': 'PIRATE_BASE', 'OVERCROWDED': 'OVERCROWDED', 'HIGH_TECH': 'HIGH_TECH', 'CORRUPT': 'CORRUPT', 'BUREAUCRATIC': 'BUREAUCRATIC', 'TRADING_HUB': 'TRADING_HUB', 'INDUSTRIAL': 'INDUSTRIAL', 'BLACK_MARKET': 'BLACK_MARKET', 'RESEARCH_FACILITY': 'RESEARCH_FACILITY', 'MILITARY_BASE': 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST': 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST': 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS': 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS': 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS': 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS': 'RARE_METAL_DEPOSITS', 'METHANE_POOLS': 'METHANE_POOLS', 'ICE_CRYSTALS': 'ICE_CRYSTALS', 'EXPLOSIVE_GASES': 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE': 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS': 'VIBRANT_AURORAS', 'SALT_FLATS': 'SALT_FLATS', 'CANYONS': 'CANYONS', 'PERPETUAL_DAYLIGHT': 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST': 'PERPETUAL_OVERCAST', 'DRY_SEABEDS': 'DRY_SEABEDS', 'MAGMA_SEAS': 'MAGMA_SEAS', 'SUPERVOLCANOES': 'SUPERVOLCANOES', 'ASH_CLOUDS': 'ASH_CLOUDS', 'VAST_RUINS': 'VAST_RUINS', 'MUTATED_FLORA': 'MUTATED_FLORA', 'TERRAFORMED': 'TERRAFORMED', 'EXTREME_TEMPERATURES': 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE': 'EXTREME_PRESSURE', 'DIVERSE_LIFE': 'DIVERSE_LIFE', 'SCARCE_LIFE': 'SCARCE_LIFE', 'FOSSILS': 'FOSSILS', 'WEAK_GRAVITY': 'WEAK_GRAVITY', 'STRONG_GRAVITY': 'STRONG_GRAVITY', 'CRUSHING_GRAVITY': 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE': 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE': 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE': 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE': 'THIN_ATMOSPHERE', 'JOVIAN': 'JOVIAN', 'ROCKY': 'ROCKY', 'VOLCANIC': 'VOLCANIC', 'FROZEN': 'FROZEN', 'SWAMP': 'SWAMP', 'BARREN': 'BARREN', 'TEMPERATE': 'TEMPERATE', 'JUNGLE': 'JUNGLE', 'OCEAN': 'OCEAN', 'RADIOACTIVE': 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES': 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER': 'DEBRIS_CLUSTER', 'DEEP_CRATERS': 'DEEP_CRATERS', 'SHALLOW_CRATERS': 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION': 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR': 'HOLLOWED_INTERIOR', 'STRIPPED': 'STRIPPED'}, class_info=Class(name='WaypointTraitSymbol', module_name='waypoint_trait_symbol'), value_type=<class 'str'>, default=None))])}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetSystemWaypointsResponse200', module_name='get_system_waypoints_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data', 'meta'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/Waypoint'), properties=None, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'meta': Reference(ref='#/components/schemas/Meta')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetSystemWaypointsResponse200'}, required_properties=[ListProperty(name='data', required=True, nullable=False, default=None, python_name='data', description=None, example=None, inner_property=ModelProperty(name='data_item', required=True, nullable=False, default=None, python_name='data_item', example=None, class_info=Class(name='Waypoint', module_name='waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y', 'orbitals', 'traits', 'isUnderConstruction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbitals': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointOrbital'), properties=None, additionalProperties=None, description='Waypoints that orbit this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'faction': Reference(ref='#/components/schemas/WaypointFaction'), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointTrait'), properties=None, additionalProperties=None, description='The traits of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'modifiers': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointModifier'), properties=None, additionalProperties=None, description='The modifiers of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chart': Reference(ref='#/components/schemas/Chart'), 'isUnderConstruction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='True if the waypoint is under construction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.', roots={'/components/schemas/Waypoint', 'Waypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", example=None), ListProperty(name='orbitals', required=True, nullable=False, default=None, python_name='orbitals', description='Waypoints that orbit this waypoint.', example=None, inner_property=ModelProperty(name='orbitals_item', required=True, nullable=False, default=None, python_name='orbitals_item', example=None, class_info=Class(name='WaypointOrbital', module_name='waypoint_orbital'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the orbiting waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An orbital is another waypoint that orbits a parent waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An orbital is another waypoint that orbits a parent waypoint.', roots={'/components/schemas/WaypointOrbital', 'WaypointOrbital'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the orbiting waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='The traits of the waypoint.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='WaypointTrait', module_name='waypoint_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WaypointTrait', '/components/schemas/WaypointTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'UNCHARTED': 'UNCHARTED', 'UNDER_CONSTRUCTION': 'UNDER_CONSTRUCTION', 'MARKETPLACE': 'MARKETPLACE', 'SHIPYARD': 'SHIPYARD', 'OUTPOST': 'OUTPOST', 'SCATTERED_SETTLEMENTS': 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES': 'SPRAWLING_CITIES', 'MEGA_STRUCTURES': 'MEGA_STRUCTURES', 'PIRATE_BASE': 'PIRATE_BASE', 'OVERCROWDED': 'OVERCROWDED', 'HIGH_TECH': 'HIGH_TECH', 'CORRUPT': 'CORRUPT', 'BUREAUCRATIC': 'BUREAUCRATIC', 'TRADING_HUB': 'TRADING_HUB', 'INDUSTRIAL': 'INDUSTRIAL', 'BLACK_MARKET': 'BLACK_MARKET', 'RESEARCH_FACILITY': 'RESEARCH_FACILITY', 'MILITARY_BASE': 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST': 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST': 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS': 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS': 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS': 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS': 'RARE_METAL_DEPOSITS', 'METHANE_POOLS': 'METHANE_POOLS', 'ICE_CRYSTALS': 'ICE_CRYSTALS', 'EXPLOSIVE_GASES': 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE': 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS': 'VIBRANT_AURORAS', 'SALT_FLATS': 'SALT_FLATS', 'CANYONS': 'CANYONS', 'PERPETUAL_DAYLIGHT': 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST': 'PERPETUAL_OVERCAST', 'DRY_SEABEDS': 'DRY_SEABEDS', 'MAGMA_SEAS': 'MAGMA_SEAS', 'SUPERVOLCANOES': 'SUPERVOLCANOES', 'ASH_CLOUDS': 'ASH_CLOUDS', 'VAST_RUINS': 'VAST_RUINS', 'MUTATED_FLORA': 'MUTATED_FLORA', 'TERRAFORMED': 'TERRAFORMED', 'EXTREME_TEMPERATURES': 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE': 'EXTREME_PRESSURE', 'DIVERSE_LIFE': 'DIVERSE_LIFE', 'SCARCE_LIFE': 'SCARCE_LIFE', 'FOSSILS': 'FOSSILS', 'WEAK_GRAVITY': 'WEAK_GRAVITY', 'STRONG_GRAVITY': 'STRONG_GRAVITY', 'CRUSHING_GRAVITY': 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE': 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE': 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE': 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE': 'THIN_ATMOSPHERE', 'JOVIAN': 'JOVIAN', 'ROCKY': 'ROCKY', 'VOLCANIC': 'VOLCANIC', 'FROZEN': 'FROZEN', 'SWAMP': 'SWAMP', 'BARREN': 'BARREN', 'TEMPERATE': 'TEMPERATE', 'JUNGLE': 'JUNGLE', 'OCEAN': 'OCEAN', 'RADIOACTIVE': 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES': 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER': 'DEBRIS_CLUSTER', 'DEEP_CRATERS': 'DEEP_CRATERS', 'SHALLOW_CRATERS': 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION': 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR': 'HOLLOWED_INTERIOR', 'STRIPPED': 'STRIPPED'}, class_info=Class(name='WaypointTraitSymbol', module_name='waypoint_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_trait_symbol import WaypointTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isUnderConstruction', required=True, nullable=False, default=None, python_name='is_under_construction', description='True if the waypoint is under construction.', example=None)], optional_properties=[StringProperty(name='orbits', required=False, nullable=False, default=None, python_name='orbits', description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', example=None, max_length=None, pattern=None), ModelProperty(name='faction', required=False, nullable=False, default=None, python_name='faction', example=None, class_info=Class(name='WaypointFaction', module_name='waypoint_faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol')}, additionalProperties=None, description='The faction that controls the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The faction that controls the waypoint.', roots={'/components/schemas/WaypointFaction', 'WaypointFaction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modifiers', required=False, nullable=False, default=None, python_name='modifiers', description='The modifiers of the waypoint.', example=None, inner_property=ModelProperty(name='modifiers_item', required=True, nullable=False, default=None, python_name='modifiers_item', example=None, class_info=Class(name='WaypointModifier', module_name='waypoint_modifier'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointModifierSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/WaypointModifier', 'WaypointModifier'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the modifier.', example=None, values={'STRIPPED': 'STRIPPED', 'UNSTABLE': 'UNSTABLE', 'RADIATION_LEAK': 'RADIATION_LEAK', 'CRITICAL_LIMIT': 'CRITICAL_LIMIT', 'CIVIL_UNREST': 'CIVIL_UNREST'}, class_info=Class(name='WaypointModifierSymbol', module_name='waypoint_modifier_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_modifier_symbol import WaypointModifierSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ModelProperty(name='chart', required=False, nullable=False, default=None, python_name='chart', example=None, class_info=Class(name='Chart', module_name='chart'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'submittedBy': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The agent that submitted the chart for this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'submittedOn': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time the chart for this waypoint was submitted.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The chart of a system or waypoint, which makes the location visible to other agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The chart of a system or waypoint, which makes the location visible to other agents.', roots={'Chart', '/components/schemas/Chart'}, required_properties=[], optional_properties=[StringProperty(name='waypointSymbol', required=False, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='submittedBy', required=False, nullable=False, default=None, python_name='submitted_by', description='The agent that submitted the chart for this waypoint.', example=None, max_length=None, pattern=None), DateTimeProperty(name='submittedOn', required=False, nullable=False, default=None, python_name='submitted_on', description='The time the chart for this waypoint was submitted.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.waypoint_type import WaypointType', 'from typing import Dict'}, lazy_imports={'from ..models.waypoint_modifier import WaypointModifier', 'from ..models.waypoint_trait import WaypointTrait', 'from ..models.waypoint_faction import WaypointFaction', 'from ..models.chart import Chart', 'from ..models.waypoint_orbital import WaypointOrbital'}, additional_properties=True, is_multipart_body=False)), ModelProperty(name='meta', required=True, nullable=False, default=None, python_name='meta', example=None, class_info=Class(name='Meta', module_name='meta'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['total', 'page', 'limit'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'total': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Shows the total amount of items of this kind that exist.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'page': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', schema_format=None, default=1, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'limit': Schema(title=None, multipleOf=None, maximum=20.0, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The amount of items in each page. Limits how many items can be fetched at once.', schema_format=None, default=10, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Meta details for pagination.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None, x-examples={'example-1': {'total': 6, 'page': 1, 'limit': 20}}), description='Meta details for pagination.', roots={'Meta', '/components/schemas/Meta'}, required_properties=[IntProperty(name='total', required=True, nullable=False, default=None, python_name='total', description='Shows the total amount of items of this kind that exist.', example=None), IntProperty(name='page', required=True, nullable=False, default=1, python_name='page', description='A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.', example=None), IntProperty(name='limit', required=True, nullable=False, default=10, python_name='limit', description='The amount of items in each page. Limits how many items can be fetched at once.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast, List', 'from typing import cast'}, lazy_imports={'from ..models.waypoint import Waypoint', 'from ..models.meta import Meta'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'system_symbol', 'traits', 'type', 'limit', 'page'})
from .get_system_waypoints import asyncio_detailed as get_system_waypoints_asyncio
from .get_system_waypoints import sync_detailed as get_system_waypoints
from .get_systems import asyncio_detailed as get_systems_asyncio
from .get_systems import sync_detailed as get_systems

# Endpoint(path='/systems/{systemSymbol}/waypoints/{waypointSymbol}', method='get', description="View the details of a waypoint.\n\nIf the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.", name='get-waypoint', requires_security=True, tag='systems', summary='Get Waypoint', relative_imports={'from ...models.get_waypoint_response_200 import GetWaypointResponse200', 'from typing import Dict', 'from typing import cast'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None)), ('waypointSymbol', StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.OK: 200>, prop=ModelProperty(name='response_200', required=True, nullable=False, default=None, python_name='response_200', example=None, class_info=Class(name='GetWaypointResponse200', module_name='get_waypoint_response_200'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Reference(ref='#/components/schemas/Waypoint')}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'GetWaypointResponse200'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='Waypoint', module_name='waypoint'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'type', 'systemSymbol', 'x', 'y', 'orbitals', 'traits', 'isUnderConstruction'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'type': Reference(ref='#/components/schemas/WaypointType'), 'systemSymbol': Reference(ref='#/components/schemas/SystemSymbol'), 'x': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'y': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbitals': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointOrbital'), properties=None, additionalProperties=None, description='Waypoints that orbit this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'orbits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'faction': Reference(ref='#/components/schemas/WaypointFaction'), 'traits': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointTrait'), properties=None, additionalProperties=None, description='The traits of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'modifiers': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/WaypointModifier'), properties=None, additionalProperties=None, description='The modifiers of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'chart': Reference(ref='#/components/schemas/Chart'), 'isUnderConstruction': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='True if the waypoint is under construction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.', roots={'/components/schemas/Waypoint', 'Waypoint'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), EnumProperty(name='type', required=True, nullable=False, python_name='type', description='The type of waypoint.', example=None, values={'PLANET': 'PLANET', 'GAS_GIANT': 'GAS_GIANT', 'MOON': 'MOON', 'ORBITAL_STATION': 'ORBITAL_STATION', 'JUMP_GATE': 'JUMP_GATE', 'ASTEROID_FIELD': 'ASTEROID_FIELD', 'ASTEROID': 'ASTEROID', 'ENGINEERED_ASTEROID': 'ENGINEERED_ASTEROID', 'ASTEROID_BASE': 'ASTEROID_BASE', 'NEBULA': 'NEBULA', 'DEBRIS_FIELD': 'DEBRIS_FIELD', 'GRAVITY_WELL': 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL': 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION': 'FUEL_STATION'}, class_info=Class(name='WaypointType', module_name='waypoint_type'), value_type=<class 'str'>, default=None), StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description='The symbol of the system.', example=None, max_length=None, pattern=None), IntProperty(name='x', required=True, nullable=False, default=None, python_name='x', description="Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.", example=None), IntProperty(name='y', required=True, nullable=False, default=None, python_name='y', description="Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.", example=None), ListProperty(name='orbitals', required=True, nullable=False, default=None, python_name='orbitals', description='Waypoints that orbit this waypoint.', example=None, inner_property=ModelProperty(name='orbitals_item', required=True, nullable=False, default=None, python_name='orbitals_item', example=None, class_info=Class(name='WaypointOrbital', module_name='waypoint_orbital'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=1, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the orbiting waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='An orbital is another waypoint that orbits a parent waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='An orbital is another waypoint that orbits a parent waypoint.', roots={'/components/schemas/WaypointOrbital', 'WaypointOrbital'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the orbiting waypoint.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ListProperty(name='traits', required=True, nullable=False, default=None, python_name='traits', description='The traits of the waypoint.', example=None, inner_property=ModelProperty(name='traits_item', required=True, nullable=False, default=None, python_name='traits_item', example=None, class_info=Class(name='WaypointTrait', module_name='waypoint_trait'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointTraitSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'WaypointTrait', '/components/schemas/WaypointTrait'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the trait.', example=None, values={'UNCHARTED': 'UNCHARTED', 'UNDER_CONSTRUCTION': 'UNDER_CONSTRUCTION', 'MARKETPLACE': 'MARKETPLACE', 'SHIPYARD': 'SHIPYARD', 'OUTPOST': 'OUTPOST', 'SCATTERED_SETTLEMENTS': 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES': 'SPRAWLING_CITIES', 'MEGA_STRUCTURES': 'MEGA_STRUCTURES', 'PIRATE_BASE': 'PIRATE_BASE', 'OVERCROWDED': 'OVERCROWDED', 'HIGH_TECH': 'HIGH_TECH', 'CORRUPT': 'CORRUPT', 'BUREAUCRATIC': 'BUREAUCRATIC', 'TRADING_HUB': 'TRADING_HUB', 'INDUSTRIAL': 'INDUSTRIAL', 'BLACK_MARKET': 'BLACK_MARKET', 'RESEARCH_FACILITY': 'RESEARCH_FACILITY', 'MILITARY_BASE': 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST': 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST': 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS': 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS': 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS': 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS': 'RARE_METAL_DEPOSITS', 'METHANE_POOLS': 'METHANE_POOLS', 'ICE_CRYSTALS': 'ICE_CRYSTALS', 'EXPLOSIVE_GASES': 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE': 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS': 'VIBRANT_AURORAS', 'SALT_FLATS': 'SALT_FLATS', 'CANYONS': 'CANYONS', 'PERPETUAL_DAYLIGHT': 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST': 'PERPETUAL_OVERCAST', 'DRY_SEABEDS': 'DRY_SEABEDS', 'MAGMA_SEAS': 'MAGMA_SEAS', 'SUPERVOLCANOES': 'SUPERVOLCANOES', 'ASH_CLOUDS': 'ASH_CLOUDS', 'VAST_RUINS': 'VAST_RUINS', 'MUTATED_FLORA': 'MUTATED_FLORA', 'TERRAFORMED': 'TERRAFORMED', 'EXTREME_TEMPERATURES': 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE': 'EXTREME_PRESSURE', 'DIVERSE_LIFE': 'DIVERSE_LIFE', 'SCARCE_LIFE': 'SCARCE_LIFE', 'FOSSILS': 'FOSSILS', 'WEAK_GRAVITY': 'WEAK_GRAVITY', 'STRONG_GRAVITY': 'STRONG_GRAVITY', 'CRUSHING_GRAVITY': 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE': 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE': 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE': 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE': 'THIN_ATMOSPHERE', 'JOVIAN': 'JOVIAN', 'ROCKY': 'ROCKY', 'VOLCANIC': 'VOLCANIC', 'FROZEN': 'FROZEN', 'SWAMP': 'SWAMP', 'BARREN': 'BARREN', 'TEMPERATE': 'TEMPERATE', 'JUNGLE': 'JUNGLE', 'OCEAN': 'OCEAN', 'RADIOACTIVE': 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES': 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER': 'DEBRIS_CLUSTER', 'DEEP_CRATERS': 'DEEP_CRATERS', 'SHALLOW_CRATERS': 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION': 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR': 'HOLLOWED_INTERIOR', 'STRIPPED': 'STRIPPED'}, class_info=Class(name='WaypointTraitSymbol', module_name='waypoint_trait_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_trait_symbol import WaypointTraitSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isUnderConstruction', required=True, nullable=False, default=None, python_name='is_under_construction', description='True if the waypoint is under construction.', example=None)], optional_properties=[StringProperty(name='orbits', required=False, nullable=False, default=None, python_name='orbits', description='The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.', example=None, max_length=None, pattern=None), ModelProperty(name='faction', required=False, nullable=False, default=None, python_name='faction', example=None, class_info=Class(name='WaypointFaction', module_name='waypoint_faction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/FactionSymbol')}, additionalProperties=None, description='The faction that controls the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The faction that controls the waypoint.', roots={'/components/schemas/WaypointFaction', 'WaypointFaction'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The symbol of the faction.', example=None, values={'COSMIC': 'COSMIC', 'VOID': 'VOID', 'GALACTIC': 'GALACTIC', 'QUANTUM': 'QUANTUM', 'DOMINION': 'DOMINION', 'ASTRO': 'ASTRO', 'CORSAIRS': 'CORSAIRS', 'OBSIDIAN': 'OBSIDIAN', 'AEGIS': 'AEGIS', 'UNITED': 'UNITED', 'SOLITARY': 'SOLITARY', 'COBALT': 'COBALT', 'OMEGA': 'OMEGA', 'ECHO': 'ECHO', 'LORDS': 'LORDS', 'CULT': 'CULT', 'ANCIENTS': 'ANCIENTS', 'SHADOW': 'SHADOW', 'ETHEREAL': 'ETHEREAL'}, class_info=Class(name='FactionSymbol', module_name='faction_symbol'), value_type=<class 'str'>, default=None)], optional_properties=[], relative_imports={'from ..models.faction_symbol import FactionSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False), ListProperty(name='modifiers', required=False, nullable=False, default=None, python_name='modifiers', description='The modifiers of the waypoint.', example=None, inner_property=ModelProperty(name='modifiers_item', required=True, nullable=False, default=None, python_name='modifiers_item', example=None, class_info=Class(name='WaypointModifier', module_name='waypoint_modifier'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/WaypointModifierSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='A description of the trait.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'/components/schemas/WaypointModifier', 'WaypointModifier'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description='The unique identifier of the modifier.', example=None, values={'STRIPPED': 'STRIPPED', 'UNSTABLE': 'UNSTABLE', 'RADIATION_LEAK': 'RADIATION_LEAK', 'CRITICAL_LIMIT': 'CRITICAL_LIMIT', 'CIVIL_UNREST': 'CIVIL_UNREST'}, class_info=Class(name='WaypointModifierSymbol', module_name='waypoint_modifier_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the trait.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='A description of the trait.', example=None, max_length=None, pattern=None)], optional_properties=[], relative_imports={'from ..models.waypoint_modifier_symbol import WaypointModifierSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), ModelProperty(name='chart', required=False, nullable=False, default=None, python_name='chart', example=None, class_info=Class(name='Chart', module_name='chart'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'waypointSymbol': Reference(ref='#/components/schemas/WaypointSymbol'), 'submittedBy': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The agent that submitted the chart for this waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'submittedOn': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The time the chart for this waypoint was submitted.', schema_format='date-time', default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The chart of a system or waypoint, which makes the location visible to other agents.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The chart of a system or waypoint, which makes the location visible to other agents.', roots={'Chart', '/components/schemas/Chart'}, required_properties=[], optional_properties=[StringProperty(name='waypointSymbol', required=False, nullable=False, default=None, python_name='waypoint_symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), StringProperty(name='submittedBy', required=False, nullable=False, default=None, python_name='submitted_by', description='The agent that submitted the chart for this waypoint.', example=None, max_length=None, pattern=None), DateTimeProperty(name='submittedOn', required=False, nullable=False, default=None, python_name='submitted_on', description='The time the chart for this waypoint was submitted.', example=None)], relative_imports={'from ..types import UNSET, Unset', 'from typing import cast', 'from typing import Union', 'from dateutil.parser import isoparse', 'import datetime'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)], relative_imports={'from typing import cast, List', 'from ..types import UNSET, Unset', 'from typing import Union', 'from typing import cast', 'from ..models.waypoint_type import WaypointType', 'from typing import Dict'}, lazy_imports={'from ..models.waypoint_modifier import WaypointModifier', 'from ..models.waypoint_trait import WaypointTrait', 'from ..models.waypoint_faction import WaypointFaction', 'from ..models.chart import Chart', 'from ..models.waypoint_orbital import WaypointOrbital'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.waypoint import Waypoint'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=None, multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'waypoint_symbol', 'system_symbol'})
from .get_waypoint import asyncio_detailed as get_waypoint_asyncio
from .get_waypoint import sync_detailed as get_waypoint

# Endpoint(path='/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply', method='post', description="Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.\n\nThe good must be in your ship's cargo. The good will be removed from your ship's cargo and added to the construction site's materials.", name='supply-construction', requires_security=True, tag='systems', summary='Supply Construction Site', relative_imports={'from ...models.supply_construction_json_body import SupplyConstructionJsonBody', 'from typing import Dict', 'from typing import cast', 'from ...models.supply_construction_response_201 import SupplyConstructionResponse201'}, query_parameters={}, path_parameters=OrderedDict([('systemSymbol', StringProperty(name='systemSymbol', required=True, nullable=False, default=None, python_name='system_symbol', description=None, example=None, max_length=None, pattern=None)), ('waypointSymbol', StringProperty(name='waypointSymbol', required=True, nullable=False, default=None, python_name='waypoint_symbol', description=None, example=None, max_length=None, pattern=None))]), header_parameters={}, cookie_parameters={}, responses=[Response(status_code=<HTTPStatus.CREATED: 201>, prop=ModelProperty(name='response_201', required=True, nullable=False, default=None, python_name='response_201', example=None, class_info=Class(name='SupplyConstructionResponse201', module_name='supply_construction_response_201'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['data'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'data': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['construction', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'construction': Reference(ref='#/components/schemas/Construction'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SupplyConstructionResponse201'}, required_properties=[ModelProperty(name='data', required=True, nullable=False, default=None, python_name='data', example=None, class_info=Class(name='SupplyConstructionResponse201Data', module_name='supply_construction_response_201_data'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['construction', 'cargo'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'construction': Reference(ref='#/components/schemas/Construction'), 'cargo': Reference(ref='#/components/schemas/ShipCargo')}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SupplyConstructionResponse201', 'SupplyConstructionResponse201Data'}, required_properties=[ModelProperty(name='construction', required=True, nullable=False, default=None, python_name='construction', example=None, class_info=Class(name='Construction', module_name='construction'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'materials', 'isComplete'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'materials': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ConstructionMaterial'), properties=None, additionalProperties=None, description='The materials required to construct the waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'isComplete': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.BOOLEAN: 'boolean'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Whether the waypoint has been constructed.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The construction details of a waypoint.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The construction details of a waypoint.', roots={'/components/schemas/Construction', 'Construction'}, required_properties=[StringProperty(name='symbol', required=True, nullable=False, default=None, python_name='symbol', description='The symbol of the waypoint.', example=None, max_length=None, pattern=None), ListProperty(name='materials', required=True, nullable=False, default=None, python_name='materials', description='The materials required to construct the waypoint.', example=None, inner_property=ModelProperty(name='materials_item', required=True, nullable=False, default=None, python_name='materials_item', example=None, class_info=Class(name='ConstructionMaterial', module_name='construction_material'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['tradeSymbol', 'required', 'fulfilled'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'tradeSymbol': Reference(ref='#/components/schemas/TradeSymbol'), 'required': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units required.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'fulfilled': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units fulfilled toward the required amount.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The details of the required construction materials for a given waypoint under construction.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The details of the required construction materials for a given waypoint under construction.', roots={'ConstructionMaterial', '/components/schemas/ConstructionMaterial'}, required_properties=[EnumProperty(name='tradeSymbol', required=True, nullable=False, python_name='trade_symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), IntProperty(name='required', required=True, nullable=False, default=None, python_name='required', description='The number of units required.', example=None), IntProperty(name='fulfilled', required=True, nullable=False, default=None, python_name='fulfilled', description='The number of units fulfilled toward the required amount.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False)), BooleanProperty(name='isComplete', required=True, nullable=False, default=None, python_name='is_complete', description='Whether the waypoint has been constructed.', example=None)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.construction_material import ConstructionMaterial'}, additional_properties=True, is_multipart_body=False), ModelProperty(name='cargo', required=True, nullable=False, default=None, python_name='cargo', example=None, class_info=Class(name='ShipCargo', module_name='ship_cargo'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['capacity', 'units', 'inventory'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'capacity': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The max number of items that can be stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=0.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of items currently stored in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'inventory': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.ARRAY: 'array'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=Reference(ref='#/components/schemas/ShipCargoItem'), properties=None, additionalProperties=None, description='The items currently in the cargo hold.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='Ship cargo details.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='Ship cargo details.', roots={'/components/schemas/ShipCargo', 'ShipCargo'}, required_properties=[IntProperty(name='capacity', required=True, nullable=False, default=None, python_name='capacity', description='The max number of items that can be stored in the cargo hold.', example=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of items currently stored in the cargo hold.', example=None), ListProperty(name='inventory', required=True, nullable=False, default=None, python_name='inventory', description='The items currently in the cargo hold.', example=None, inner_property=ModelProperty(name='inventory_item', required=True, nullable=False, default=None, python_name='inventory_item', example=None, class_info=Class(name='ShipCargoItem', module_name='ship_cargo_item'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['symbol', 'name', 'description', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'symbol': Reference(ref='#/components/schemas/TradeSymbol'), 'name': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The name of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'description': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The description of the cargo item type.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=1.0, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The number of units of the cargo item.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description='The type of cargo item and the number of units.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='The type of cargo item and the number of units.', roots={'/components/schemas/ShipCargoItem', 'ShipCargoItem'}, required_properties=[EnumProperty(name='symbol', required=True, nullable=False, python_name='symbol', description="The good's symbol.", example=None, values={'PRECIOUS_STONES': 'PRECIOUS_STONES', 'QUARTZ_SAND': 'QUARTZ_SAND', 'SILICON_CRYSTALS': 'SILICON_CRYSTALS', 'AMMONIA_ICE': 'AMMONIA_ICE', 'LIQUID_HYDROGEN': 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN': 'LIQUID_NITROGEN', 'ICE_WATER': 'ICE_WATER', 'EXOTIC_MATTER': 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY': 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS': 'GRAVITON_EMITTERS', 'IRON': 'IRON', 'IRON_ORE': 'IRON_ORE', 'COPPER': 'COPPER', 'COPPER_ORE': 'COPPER_ORE', 'ALUMINUM': 'ALUMINUM', 'ALUMINUM_ORE': 'ALUMINUM_ORE', 'SILVER': 'SILVER', 'SILVER_ORE': 'SILVER_ORE', 'GOLD': 'GOLD', 'GOLD_ORE': 'GOLD_ORE', 'PLATINUM': 'PLATINUM', 'PLATINUM_ORE': 'PLATINUM_ORE', 'DIAMONDS': 'DIAMONDS', 'URANITE': 'URANITE', 'URANITE_ORE': 'URANITE_ORE', 'MERITIUM': 'MERITIUM', 'MERITIUM_ORE': 'MERITIUM_ORE', 'HYDROCARBON': 'HYDROCARBON', 'ANTIMATTER': 'ANTIMATTER', 'FAB_MATS': 'FAB_MATS', 'FERTILIZERS': 'FERTILIZERS', 'FABRICS': 'FABRICS', 'FOOD': 'FOOD', 'JEWELRY': 'JEWELRY', 'MACHINERY': 'MACHINERY', 'FIREARMS': 'FIREARMS', 'ASSAULT_RIFLES': 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT': 'MILITARY_EQUIPMENT', 'EXPLOSIVES': 'EXPLOSIVES', 'LAB_INSTRUMENTS': 'LAB_INSTRUMENTS', 'AMMUNITION': 'AMMUNITION', 'ELECTRONICS': 'ELECTRONICS', 'SHIP_PLATING': 'SHIP_PLATING', 'SHIP_PARTS': 'SHIP_PARTS', 'EQUIPMENT': 'EQUIPMENT', 'FUEL': 'FUEL', 'MEDICINE': 'MEDICINE', 'DRUGS': 'DRUGS', 'CLOTHING': 'CLOTHING', 'MICROPROCESSORS': 'MICROPROCESSORS', 'PLASTICS': 'PLASTICS', 'POLYNUCLEOTIDES': 'POLYNUCLEOTIDES', 'BIOCOMPOSITES': 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS': 'QUANTUM_STABILIZERS', 'NANOBOTS': 'NANOBOTS', 'AI_MAINFRAMES': 'AI_MAINFRAMES', 'QUANTUM_DRIVES': 'QUANTUM_DRIVES', 'ROBOTIC_DRONES': 'ROBOTIC_DRONES', 'CYBER_IMPLANTS': 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS': 'GENE_THERAPEUTICS', 'NEURAL_CHIPS': 'NEURAL_CHIPS', 'MOOD_REGULATORS': 'MOOD_REGULATORS', 'VIRAL_AGENTS': 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS': 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS': 'SUPERGRAINS', 'LASER_RIFLES': 'LASER_RIFLES', 'HOLOGRAPHICS': 'HOLOGRAPHICS', 'SHIP_SALVAGE': 'SHIP_SALVAGE', 'RELIC_TECH': 'RELIC_TECH', 'NOVEL_LIFEFORMS': 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS': 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS': 'CULTURAL_ARTIFACTS', 'FRAME_PROBE': 'FRAME_PROBE', 'FRAME_DRONE': 'FRAME_DRONE', 'FRAME_INTERCEPTOR': 'FRAME_INTERCEPTOR', 'FRAME_RACER': 'FRAME_RACER', 'FRAME_FIGHTER': 'FRAME_FIGHTER', 'FRAME_FRIGATE': 'FRAME_FRIGATE', 'FRAME_SHUTTLE': 'FRAME_SHUTTLE', 'FRAME_EXPLORER': 'FRAME_EXPLORER', 'FRAME_MINER': 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER': 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER': 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT': 'FRAME_TRANSPORT', 'FRAME_DESTROYER': 'FRAME_DESTROYER', 'FRAME_CRUISER': 'FRAME_CRUISER', 'FRAME_CARRIER': 'FRAME_CARRIER', 'REACTOR_SOLAR_I': 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I': 'REACTOR_FUSION_I', 'REACTOR_FISSION_I': 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I': 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I': 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I': 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I': 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II': 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I': 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I': 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I': 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I': 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II': 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III': 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I': 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I': 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I': 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I': 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I': 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I': 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II': 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III': 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I': 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II': 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III': 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I': 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II': 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I': 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I': 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I': 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II': 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III': 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I': 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II': 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III': 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I': 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II': 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III': 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I': 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II': 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III': 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I': 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I': 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I': 'MOUNT_TURRET_I', 'SHIP_PROBE': 'SHIP_PROBE', 'SHIP_MINING_DRONE': 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE': 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR': 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER': 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE': 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER': 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER': 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE': 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND': 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER': 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR': 'SHIP_SURVEYOR'}, class_info=Class(name='TradeSymbol', module_name='trade_symbol'), value_type=<class 'str'>, default=None), StringProperty(name='name', required=True, nullable=False, default=None, python_name='name', description='The name of the cargo item type.', example=None, max_length=None, pattern=None), StringProperty(name='description', required=True, nullable=False, default=None, python_name='description', description='The description of the cargo item type.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='The number of units of the cargo item.', example=None)], optional_properties=[], relative_imports={'from ..models.trade_symbol import TradeSymbol'}, lazy_imports=set(), additional_properties=True, is_multipart_body=False))], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast', 'from typing import cast, List'}, lazy_imports={'from ..models.ship_cargo_item import ShipCargoItem'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.construction import Construction', 'from ..models.ship_cargo import ShipCargo'}, additional_properties=True, is_multipart_body=False)], optional_properties=[], relative_imports={'from typing import Dict', 'from typing import cast'}, lazy_imports={'from ..models.supply_construction_response_201_data import SupplyConstructionResponse201Data'}, additional_properties=True, is_multipart_body=False), source={'attribute': 'response.json()', 'return_type': 'Any'})], form_body=None, json_body=ModelProperty(name='json_body', required=True, nullable=False, default=None, python_name='json_body', example=None, class_info=Class(name='SupplyConstructionJsonBody', module_name='supply_construction_json_body'), data=Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=['shipSymbol', 'tradeSymbol', 'units'], enum=None, type=<DataType.OBJECT: 'object'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties={'shipSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Symbol of the ship to use.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'tradeSymbol': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.STRING: 'string'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='The symbol of the good to supply.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), 'units': Schema(title=None, multipleOf=None, maximum=None, exclusiveMaximum=None, minimum=None, exclusiveMinimum=None, maxLength=None, minLength=None, pattern=None, maxItems=None, minItems=None, uniqueItems=None, maxProperties=None, minProperties=None, required=None, enum=None, type=<DataType.INTEGER: 'integer'>, allOf=[], oneOf=[], anyOf=[], schema_not=None, items=None, properties=None, additionalProperties=None, description='Amount of units to supply.', schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None)}, additionalProperties=None, description=None, schema_format=None, default=None, nullable=False, discriminator=None, readOnly=None, writeOnly=None, xml=None, externalDocs=None, example=None, deprecated=None), description='', roots={'SupplyConstructionJsonBody'}, required_properties=[StringProperty(name='shipSymbol', required=True, nullable=False, default=None, python_name='ship_symbol', description='Symbol of the ship to use.', example=None, max_length=None, pattern=None), StringProperty(name='tradeSymbol', required=True, nullable=False, default=None, python_name='trade_symbol', description='The symbol of the good to supply.', example=None, max_length=None, pattern=None), IntProperty(name='units', required=True, nullable=False, default=None, python_name='units', description='Amount of units to supply.', example=None)], optional_properties=[], relative_imports=set(), lazy_imports=set(), additional_properties=True, is_multipart_body=False), multipart_body=None, binary_body=None, errors=[], used_python_identifiers={'waypoint_symbol', 'system_symbol'})
from .supply_construction import asyncio_detailed as supply_construction_asyncio
from .supply_construction import sync_detailed as supply_construction

__all__ = (
    "get_systems",
    "get_systems_asyncio",
    "get_system",
    "get_system_asyncio",
    "get_system_waypoints",
    "get_system_waypoints_asyncio",
    "get_waypoint",
    "get_waypoint_asyncio",
    "get_market",
    "get_market_asyncio",
    "get_shipyard",
    "get_shipyard_asyncio",
    "get_jump_gate",
    "get_jump_gate_asyncio",
    "get_construction",
    "get_construction_asyncio",
    "supply_construction",
    "supply_construction_asyncio",
)
